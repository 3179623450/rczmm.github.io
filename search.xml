<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++自学笔记（1）</title>
    <url>/2022/08/29/C-%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<p>C++很重要，很重要，很重要。</p>
<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 头文件引入
#include &lt;iostream&gt;
&#x2F;&#x2F; 使用名为std的命名空间
using namespace std;
&#x2F;&#x2F; main方法，程序开始的地方，返回值为整形
int main()&#123;
    &#x2F;&#x2F; 打印消息hello！
    cout&lt;&lt;&quot;hello!&quot;;
    &#x2F;&#x2F; 返回0，终止main函数，并且向调用进程返回0
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>分号 &amp; 语句块</p>
<p>在c++里，分号是语句的结束符，并且每一条语句都必须以分号结尾。</p>
<p>语句块是一组用大括号包含起来的语句。</p>
<p>c++里，你可以在一行里写多条语句，只要他们在结尾时使用分号。</p>
<p>标识符 &amp; 关键字</p>
<p>标识符用来标识变量、函数、类、模块或者其他的自定义的名称，标识符的组成是大小写字母、数字以及下划线，但是要注意的是，数字不能开头。</p>
<p>同时，c++内严格区分大小写。</p>
<p>关键字是c++的保留字，这些保留字无法作为常量名、变量、函数等其他标识符的名称。</p>
<p>三字符序列 &amp; 空格</p>
<p>三字符序列，用于表示另一个字符的三个字符组成的序列，这些序列总是以两个问号开头。</p>
<p>这并不常见，但是c++允许这样的表示，为了表示键盘上没有的字符。值得注意的是，三字符序列可以出现在任何的地方，包括字符串、字符序列、注释和预处理指令。</p>
<p>当然如果希望在源码中有两个连续的问号，并且不希望他们被替换掉，可以使用转义字符或者是字符串自动拼接。</p>
<p>空格也是必要的符号，空格用于描述空白符、制表符、换行符和注释，同时它也起到了分割语句各个部分的作用。有时候，为了增加一些可读性，我们也会主动的添加一些不是必要的空格。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>c++的注释是解释性的语句，在c++中支持单行和多行两种注释。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 我是单行注释

&#x2F;*
  
  我是多行注释内的内容！！
&#x2F;&#x2F;  我是单行注释
  
*&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>单行注释，从//开始，直到一行结束</p>
<p>多行注释，在/* 到 */的内容都是多行注释的内容，并且可以在其中添加单行注释，实现注释的嵌套。</p>
<p>注意的是，多行中无法嵌套多行。</p>
<p>除此之外，还可以通过条件编译在实现注释：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#if 0
cout&lt;&lt;&quot;hello&quot;;
#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>c++为程序员提供了七种基本数据类型。</p>
<p>布尔（bool）、字符（char）、整形（int）、浮点（float）、双浮点（double）、宽字符（wchar_1）、无类型（void）。</p>
<p>一些基本类型可以使用一个或者多个卡类型修饰符进行修饰。</p>
<p>signed、unsigned、short、long</p>
<p>这些修饰符可以改变数据类型所能存储的最大值和最小值。</p>
<p>其中，各个类型的大小和系统的位数有关。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;limits&gt;

using namespace std;

int main() &#123;
    cout &lt;&lt; &quot;type: \t\t&quot; &lt;&lt; &quot;************size**************&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;bool: \t\t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(bool);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;bool&gt;::max)();
    cout &lt;&lt; &quot;\t\t最小值：&quot; &lt;&lt; (numeric_limits&lt;bool&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;char: \t\t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(char);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;char&gt;::max)();
    cout &lt;&lt; &quot;\t\t最小值：&quot; &lt;&lt; (numeric_limits&lt;char&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;signed char: \t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(signed char);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;signed char&gt;::max)();
    cout &lt;&lt; &quot;\t\t最小值：&quot; &lt;&lt; (numeric_limits&lt;signed char&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;unsigned char: \t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(unsigned char);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;unsigned char&gt;::max)();
    cout &lt;&lt; &quot;\t\t最小值：&quot; &lt;&lt; (numeric_limits&lt;unsigned char&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;wchar_t: \t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(wchar_t);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;wchar_t&gt;::max)();
    cout &lt;&lt; &quot;\t\t最小值：&quot; &lt;&lt; (numeric_limits&lt;wchar_t&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;short: \t\t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(short);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;short&gt;::max)();
    cout &lt;&lt; &quot;\t\t最小值：&quot; &lt;&lt; (numeric_limits&lt;short&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;int: \t\t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(int);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;int&gt;::max)();
    cout &lt;&lt; &quot;\t最小值：&quot; &lt;&lt; (numeric_limits&lt;int&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;unsigned: \t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(unsigned);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;unsigned&gt;::max)();
    cout &lt;&lt; &quot;\t最小值：&quot; &lt;&lt; (numeric_limits&lt;unsigned&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;long: \t\t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(long);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;long&gt;::max)();
    cout &lt;&lt; &quot;\t最小值：&quot; &lt;&lt; (numeric_limits&lt;long&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;unsigned long: \t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(unsigned long);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;unsigned long&gt;::max)();
    cout &lt;&lt; &quot;\t最小值：&quot; &lt;&lt; (numeric_limits&lt;unsigned long&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;double: \t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(double);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;double&gt;::max)();
    cout &lt;&lt; &quot;\t最小值：&quot; &lt;&lt; (numeric_limits&lt;double&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;long double: \t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(long double);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;long double&gt;::max)();
    cout &lt;&lt; &quot;\t最小值：&quot; &lt;&lt; (numeric_limits&lt;long double&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;float: \t\t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(float);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;float&gt;::max)();
    cout &lt;&lt; &quot;\t最小值：&quot; &lt;&lt; (numeric_limits&lt;float&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;size_t: \t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(size_t);
    cout &lt;&lt; &quot;\t最大值：&quot; &lt;&lt; (numeric_limits&lt;size_t&gt;::max)();
    cout &lt;&lt; &quot;\t最小值：&quot; &lt;&lt; (numeric_limits&lt;size_t&gt;::min)() &lt;&lt; endl;
    cout &lt;&lt; &quot;string: \t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(string) &lt;&lt; endl;
    cout &lt;&lt; &quot;type: \t\t&quot; &lt;&lt; &quot;************size**************&quot; &lt;&lt; endl;
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>变量的大小会编译器所在的系统有所不同，上面的实例会输出你实际电脑上各种类型的大小。</p>
<p>其中，endl，这会在每一行后插入换行符，&lt;&lt;运算度可以向平复传送多个值，sizeof（）可以获取各个数据类型的大小。</p>
<p>typedef声明 &amp; 枚举类型</p>
<p>可以使用typedef为一个已有的类型取一个新的名字。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef int id;
id student_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如上的声明就完全合法。</p>
<p>枚举是一种派生的数据类型，他是由用户定义的若干枚举类型常量的集合。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">enum sex&#123;man&#x3D;1,woman&#x3D;0&#125; xiaoming;
xiaoming &#x3D; man;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>默认的，如果不设置整形常数，他会根据顺序赋值，从0开始，但是可以给一些特殊的值，默认的，每个名称都会比前一个名称大一，因此如果你设置了man等于3，那么woman等于4。</p>
<p>变量类型 &amp; 作用域</p>
<p>变量是程序可操作的存储区的名称，每一个变量都应该有指定的类型，类型决定了变量的大小和布局，这个范围内的值都可以存储在内存中。</p>
<p>变量名称遵循标识符的命名规范，由字母、数字、下划线组成，数字不能开头。</p>
<p>变量定义</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int age &#x3D; 10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如上的语句就可以声明一个变量，并且赋值为10。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">extern int age;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>extern关键字可以任何一个地方声明变量，当使用多个文件，但是只在一个文件内定义变量的时候，就可以使用它。</p>
<p>当然，虽然可以在c++中多次声明一个变量，但变量只能在某个文件、函数或代码块中被定义一次。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int age;
char age;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如上，即使类型不一样，但依旧无法被定义，并且编译器报错。</p>
<p>左值和右值</p>
<p>C ++ 有两种类型的表达式：</p>
<p>左值：指向内存位置的表达式</p>
<p>右值：存储在内存中某些地址的数值</p>
<p>其中右值表达式无法进行赋值的操作。</p>
<p>作用域</p>
<p>程序的一个区域，一般来说有三个地方可以定义变量</p>
<p>在函数或者代码块中，局部变量。</p>
<p>在函数参数定义中声明，形式参数。</p>
<p>在所有函数外部声明的变量，全局变量。它通常在程序的头部。</p>
<p>其中局部变量和全局变量的名称可以相同，但是在区域内使用是，局部变量会覆盖全局变量的值。</p>
<p>局部变量定义时，不会初始化，但是全局变量定义系统会自动初始化。</p>
<p>常量</p>
<p>固定值，在程序执行期间不会发生改变的值，又叫做字面量。常量就像是特殊的变量，只是他的值在定义后无法修改而已。</p>
<p>其中，整数常量的表示可以是无符号与长整数，在常量后加后缀U或者L。</p>
<p>也可以表示为，二进制、十进制、八进制、十六进制。由前缀指定，0x指定十六进制，0表示八进制，0b表示二进制，什么都不带表示十进制。</p>
<p>浮点常量，可以带小数点，也可以使用指数形式表达。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double a &#x3D; 31415956e-6;
cout &lt;&lt; a &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>其中e-6代表10的-6次方，如果是float单精度浮点类型，可以在末尾加l。</p>
<p>输出后，自动保留三位小数，对于这样的精度设置问题，解决方案如下</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double a &#x3D; 31415956e-6;

cout &lt;&lt; setprecision(8) &lt;&lt; a &lt;&lt; endl;

cout &lt;&lt; setiosflags(ios::fixed|ios::showpoint)&lt;&lt;setprecision(10)&lt;&lt; a &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中，范例中用到的函数都需要引入头文件</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iomanip&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中，setprecision用来设置精度，也就是控制输出的位数，自动四舍五入，且不保留小数后的不影响大小的0。setiosflags是一个格式控制函数，此处用到的fixed、以定点方式显示实数，也就是整数部分，搭配setprecision使用，此时后者就用来只控制小数位数了，但是他依旧不能保留0，于是引入showpoint。</p>
<p>布尔常量</p>
<p>true false</p>
<p>值得注意的是，不应该把他们看成是0和1.</p>
<p>字符常量</p>
<p>字符常量在单引号中，如果它以大写L开头（在单引号外），表示他是一个宽字符常量，此时他必须存在wchar_t类型的变量中。</p>
<p>字符常量也可以是一个转义序列，例如常用的换行、制表等等。</p>
<p>字符串常量</p>
<p>字符串的字面值或常量是在双引号里的，其中\可以用来换行分隔。</p>
<p>常量定义</p>
<p>常量的定义，有两种方式。</p>
<p>使用 <strong>#define</strong> 预处理器。</p>
<p>使用 <strong>const</strong> 关键字</p>
<p><img src="/2022/08/29/C-%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220905133619556.png" class="lazyload placeholder" data-srcset="/2022/08/29/C-%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220905133619556.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220905133619556"></p>
<p>最好的，将常量定义为大写字母形式。</p>
<p>修饰符类型</p>
<p>修饰符用来改变基本类型的含义，c++允许在char、int和double面前使用修饰符。</p>
<ul>
<li>signed</li>
<li>unsigned</li>
<li>long</li>
<li>short</li>
</ul>
<p>修饰符 <strong>signed、unsigned、long 和 short</strong> 可应用于整型，<strong>signed</strong> 和 <strong>unsigned</strong> 可应用于字符型，<strong>long</strong> 可应用于双精度型。</p>
<p>修饰符 <strong>signed</strong> 和 <strong>unsigned</strong> 也可以作为 <strong>long</strong> 或 <strong>short</strong> 修饰符的前缀。例如：<strong>unsigned long int</strong>。</p>
<p>C++ 允许使用速记符号来声明<strong>无符号短整数</strong>或<strong>无符号长整数</strong>。您可以不写 int，只写单词 <strong>unsigned、short</strong> 或 <strong>long</strong>，<strong>int</strong> 是隐含的。</p>
<p>例如：</p>
<p><img src="/2022/08/29/C-%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220905133858789.png" class="lazyload placeholder" data-srcset="/2022/08/29/C-%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220905133858789.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220905133858789"></p>
<p>以上都表示声明了一个无符号短整数。</p>
<p>其中无符号数表示，所有的位都用来表示大小，因此无符号数只能是正数。</p>
<p>对于二者的转换，主要看转换数第一位是否为1，为1，直接取原数，不为1取补码。</p>
<p>类型限定符</p>
<p>const ： 声明常量，表示对象在程序执行期间不能被修改</p>
<p>volatile： 不需要优化，传统的变量，编译器对其优化后，会把值放在寄存器里加快读写，但是这个关键字让程序直接在内存中读取变量。</p>
<p>restrict：指针修饰符，表示该指针是唯一一种访问对象的方式。（只有C99才用）</p>
<p>存储类</p>
<p>某种程度上说，这也是限定符，他定义了变量或者函数的范围和生命周期。</p>
<ul>
<li>auto</li>
<li>register</li>
<li>static</li>
<li>extern</li>
<li>mutable</li>
<li>thread_local (C++11)</li>
</ul>
<p>auto，c++17中删除，自动推断变量类型，声明函数返回值。</p>
<p>register 存储类用于定义存储在寄存器中而不是内存中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p>
<p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p>
<p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p>
<p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 ‘extern’ 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候。</p>
<p><strong>mutable</strong> 说明符仅适用于类的对象。它允许对象的成员替代常量。</p>
<p>使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。</p>
<p>thread_local 说明符可以与 static 或 extern 合并。</p>
<p>可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义。</p>
<p>运算符</p>
<ul>
<li>算术运算符（+、-、*、\、%、++、–）</li>
<li>关系运算符（==、!=、 &gt; 、&lt;、 &gt;= 、&lt;=）</li>
<li>逻辑运算符（&amp;&amp; 、||、 !）</li>
<li>位运算符（&amp; | ^）</li>
<li>赋值运算符(除了==，其余带有=的。)</li>
<li>杂项运算符（sizeof , &amp; * Cast Condition ? x:y）</li>
</ul>
<p>循环</p>
<p>while</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while(condition)
&#123;
   statement(s);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>for</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for ( init; condition; increment )
&#123;
   statement(s);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>do while</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">do
&#123;
   statement(s);

&#125;while( condition );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>循环控制语句</p>
<p>break</p>
<p>跳出循环</p>
<p>continue</p>
<p>跳过剩余部分，开始下次循环</p>
<p>goto</p>
<p>允许把控制无条件转移到同一函数内的被标记的语句。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">goto label;
..
.
label: statement;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>分支</p>
<p>if</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(boolean_expression)
&#123;
   &#x2F;&#x2F; 如果布尔表达式为真将执行的语句
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>if else</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(boolean_expression)
&#123;
   &#x2F;&#x2F; 如果布尔表达式为真将执行的语句
&#125;
else
&#123;
   &#x2F;&#x2F; 如果布尔表达式为假将执行的语句
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>switch case</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">switch(expression)&#123;
    case constant-expression  :
       statement(s);
       break; &#x2F;&#x2F; 可选的
    case constant-expression  :
       statement(s);
       break; &#x2F;&#x2F; 可选的
  
    &#x2F;&#x2F; 您可以有任意数量的 case 语句
    default : &#x2F;&#x2F; 可选的
       statement(s);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>constant-expression</strong> 必须与 switch 中的变量具有相同的数据类型，且必须是一个常量或字面量</p>
<p>条件运算符</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Exp1 ? Exp2 : Exp3;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中，Exp1、Exp2 和 Exp3 是表达式。请注意，冒号的使用和位置。</p>
<p>? 表达式的值是由 Exp1 决定的。如果 Exp1 为真，则计算 Exp2 的值，结果即为整个 ? 表达式的值。如果 Exp1 为假，则计算 Exp3 的值，结果即为整个 ? 表达式的值。</p>
<p>函数</p>
<p>函数是一组一起执行一个任务的语句。每个 C++ 程序都至少有一个函数，即主函数 <strong>main()</strong> ，所有简单的程序都可以定义其他额外的函数。</p>
<p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p>
<p>函数<strong>声明</strong>告诉编译器函数的名称、返回类型和参数。函数<strong>定义</strong>提供了函数的实际主体。</p>
<p>C++ 标准库提供了大量的程序可以调用的内置函数。例如，函数 <strong>strcat()</strong> 用来连接两个字符串，函数 <strong>memcpy()</strong> 用来复制内存到另一个位置。</p>
<p>函数还有很多叫法，比如方法、子例程或程序，等等。</p>
<p>函数定义</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">return_type function_name( parameter list )
&#123;
   body of the function
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><strong>返回类型：</strong>一个函数可以返回一个值。<strong>return_type</strong> 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 <strong>void</strong>。</li>
<li><strong>函数名称：</strong>这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li>
<li><strong>参数：</strong>参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li>
<li><strong>函数主体：</strong>函数主体包含一组定义函数执行任务的语句。</li>
</ul>
<p>创建 C++ 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。</p>
<p>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。</p>
<p>函数参数</p>
<p>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。</p>
<p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。</p>
<p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p>
<p>当调用函数时，有三种向函数传递参数的方式：</p>
<table>
<thead>
<tr>
<th align="left">调用类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">传值调用</td>
<td align="left">该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>
</tr>
<tr>
<td align="left">指针调用</td>
<td align="left">该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
<tr>
<td align="left">引用调用</td>
<td align="left">该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
</tbody></table>
<p>默认情况下，C++ 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的参数。</p>
<p>Lambda 函数与表达式</p>
<p>C++11 提供了对匿名函数的支持,称为 Lambda 函数(也叫 Lambda 表达式)。</p>
<p>Lambda 表达式把函数看作对象。Lambda 表达式可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值。</p>
<p>Lambda 表达式本质上与函数声明非常类似。Lambda 表达式具体形式如下:</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">[capture](parameters)-&gt;return-type&#123;body&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto m &#x3D; [](int m,int n)-&gt;int &#123; int z &#x3D; m +n;return z;&#125;;

int a11 &#x3D; m(2,7);
cout &lt;&lt; a11 &lt;&lt;endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>数组</p>
<p>在 C++ 中，您可以逐个初始化数组，也可以使用一个初始化语句</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double balance[5] &#x3D; &#123;1000.0, 2.0, 3.4, 7.0, 50.0&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>大括号 { } 之间的值的数目不能大于我们在数组声明时在方括号 [ ] 中指定的元素数目。</p>
<p>如果您省略掉了数组的大小，数组的大小则为初始化时元素的个数。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double balance[] &#x3D; &#123;1000.0, 2.0, 3.4, 7.0, 50.0&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double salary &#x3D; balance[9];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>字符串</p>
<p>C 风格的字符串起源于 C 语言，并在 C++ 中继续得到支持。字符串实际上是使用 <strong>null</strong> 字符 <strong>\0</strong> 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char site[] &#x3D; &quot;RUNOOB&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>C++ 标准库提供了 <strong>string</strong> 类类型</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string str1 &#x3D; &quot;runoob&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>指针 </p>
<p>学习 C++ 的指针既简单又有趣。通过指针，可以简化一些 C++ 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。所以，想要成为一名优秀的 C++ 程序员，学习指针是很有必要的。</p>
<p>正如您所知道的，每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。</p>
<p><strong>指针</strong>是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">type *var-name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>引用</p>
<p>本质是个别名。</p>
<p>引用很容易与指针混淆，它们之间有三个主要的不同：</p>
<ul>
<li>不存在空引用。引用必须连接到一块合法的内存。</li>
<li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li>
<li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li>
</ul>
<p>变量名称是变量附属在内存位置中的标签，可以把引用当成是变量附属在内存位置中的第二个标签。因此，可以通过原始变量名称或引用来访问变量的内容。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; 17;
int&amp;  r &#x3D; i;
double&amp; s &#x3D; d;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在这些声明中，&amp; 读作<strong>引用</strong>。因此，第一个声明可以读作 “r 是一个初始化为 i 的整型引用”，第二个声明可以读作 “s 是一个初始化为 d 的 double 型引用”。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *i;
int j &#x3D; 1000;
i &#x3D; &amp;j;
cout &lt;&lt; i &lt;&lt;endl;

int var1 &#x3D; 100;
int&amp; var2 &#x3D; var1;
cout &lt;&lt; var2 &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>日期与时间</p>
<p>C++ 继承了 C 语言用于日期和时间操作的结构和函数。为了使用日期和时间相关的函数和结构，需要在 C++ 程序中引用 <ctime> 头文件。</ctime></p>
<p>有四个与时间相关的类型：<strong>clock_t、time_t、size_t</strong> 和 <strong>tm</strong>。类型 clock_t、size_t 和 time_t 能够把系统时间和日期表示为某种整数。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">time_t now &#x3D; time(0);
cout &lt;&lt; now &lt;&lt; endl;
char *dt &#x3D; ctime(&amp;now);
cout &lt;&lt; dt;
tm *gmtm &#x3D; gmtime(&amp;now);
dt &#x3D; asctime(gmtm);
cout &lt;&lt; dt;
cout &lt;&lt;  &quot;年：&quot; &lt;&lt;gmtm -&gt;tm_year + 1900;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>基本的IO</p>
<p>C++ 标准库提供了一组丰富的输入/输出功能。</p>
<p>C++ 的 I/O 发生在流中，流是字节序列。如果字节流是从设备（如键盘、磁盘驱动器、网络连接等）流向内存，这叫做<strong>输入操作</strong>。如果字节流是从内存流向设备（如显示屏、打印机、磁盘驱动器、网络连接等），这叫做<strong>输出操作</strong>。</p>
<p>cout</p>
<p>预定义的对象 <strong>cout</strong> 是 <strong>iostream</strong> 类的一个实例。cout 对象”连接”到标准输出设备，通常是显示屏。<strong>cout</strong> 是与流插入运算符 &lt;&lt; 结合使用的。</p>
<p>C++ 编译器根据要输出变量的数据类型，选择合适的流插入运算符来显示值。&lt;&lt; 运算符被重载来输出内置类型（整型、浮点型、double 型、字符串和指针）的数据项。</p>
<p>流插入运算符 &lt;&lt; 在一个语句中可以多次使用，endl** 用于在行末添加一个换行符。</p>
<p>cin</p>
<p>预定义的对象 <strong>cin</strong> 是 <strong>iostream</strong> 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。<strong>cin</strong> 是与流提取运算符 &gt;&gt; 结合使用的</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char name[10];
cin &gt;&gt; name;
cout &lt;&lt; name &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>C++ 编译器根据要输入值的数据类型，选择合适的流提取运算符来提取值，并把它存储在给定的变量中。</p>
<p>流提取运算符 &gt;&gt; 在一个语句中可以多次使用。</p>
<p>cerr</p>
<p>预定义的对象 <strong>cerr</strong> 是 <strong>iostream</strong> 类的一个实例。cerr 对象附属到标准输出设备，通常也是显示屏，但是 <strong>cerr</strong> 对象是非缓冲的，且每个流插入到 cerr 都会立即输出。</p>
<p><strong>cerr</strong> 也是与流插入运算符 &lt;&lt; 结合使用的。</p>
<p>clog</p>
<p>预定义的对象 <strong>clog</strong> 是 <strong>iostream</strong> 类的一个实例。clog 对象附属到标准输出设备，通常也是显示屏，但是 <strong>clog</strong> 对象是缓冲的。这意味着每个流插入到 clog 都会先存储在缓冲区，直到缓冲填满或者缓冲区刷新时才会输出。</p>
<p><strong>clog</strong> 也是与流插入运算符 &lt;&lt; 结合使用的。</p>
<p>通过小实例，我们无法区分 cout、cerr 和 clog 的差异，但在编写和执行大型程序时，它们之间的差异就变得非常明显。所以良好的编程实践告诉我们，使用 cerr 流来显示错误消息，而其他的日志消息则使用 clog 流来输出。 </p>
<p>数据结构</p>
<p>C/C++ 数组允许定义可存储相同类型数据项的变量，但是<strong>结构</strong>是 C++ 中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</p>
<p>为了定义结构，您必须使用 <strong>struct</strong> 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">struct type_name &#123;
member_type1 member_name1;
member_type2 member_name2;
member_type3 member_name3;
.
.
&#125; object_names;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>type_name</strong> 是结构体类型的名称，<strong>member_type1 member_name1</strong> 是标准的变量定义，比如 <strong>int i;</strong> 或者 <strong>float f;</strong> 或者其他有效的变量定义。在结构定义的末尾，最后一个分号之前，您可以指定一个或多个结构变量，这是可选的。</p>
<p>为了访问结构的成员，我们使用<strong>成员访问运算符（.）</strong>。成员访问运算符是结构变量名称和我们要访问的结构成员之间的一个句号。</p>
<p>类 &amp; 对象</p>
<p>C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，通常被称为用户定义的类型。</p>
<p>类用于指定对象的形式，它包含了数据表示法和用于处理数据的方法。类中的数据和方法称为类的成员。函数在一个类中被称为类的成员。</p>
<p>类定义</p>
<p>定义一个类，本质上是定义一个数据类型的蓝图。这实际上并没有定义任何数据，但它定义了类的名称意味着什么，也就是说，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。</p>
<p>类定义是以关键字 <strong>class</strong> 开头，后跟类的名称。类的主体是包含在一对花括号中。类定义后必须跟着一个分号或一个声明列表。例如，我们使用关键字 <strong>class</strong> 定义 Box 数据类型。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Book &#123;
public :
    int id;
    string name;
    double price;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关键字 <strong>public</strong> 确定了类成员的访问属性。在类对象作用域内，公共成员在类的外部是可访问的。您也可以指定类的成员为 <strong>private</strong> 或 <strong>protected</strong>。</p>
<p>定义对象</p>
<p>类提供了对象的蓝图，所以基本上，对象是根据类来创建的。声明类的对象，就像声明基本类型的变量一样。</p>
<p>数据成员访问</p>
<p>类的对象的公共数据成员可以使用直接成员访问运算符 <strong>.</strong> 来访问。</p>
<p>构造函数 &amp; 析构函数</p>
<p>类的<strong>构造函数</strong>是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。</p>
<p>构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。</p>
<p>类的<strong>析构函数</strong>是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。</p>
<p>析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。</p>
<p>继承</p>
<p>面向对象程序设计中最重要的一个概念是继承。继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。</p>
<p>当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong>。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 基类
class Animal &#123;
    &#x2F;&#x2F; eat() 函数
    &#x2F;&#x2F; sleep() 函数
&#125;;


&#x2F;&#x2F;派生类
class Dog : public Animal &#123;
    &#x2F;&#x2F; bark() 函数
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重载运算符 &amp; 重载函数</p>
<p>C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分别称为<strong>函数重载</strong>和<strong>运算符重载</strong>。</p>
<p>重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。</p>
<p>当您调用一个<strong>重载函数</strong>或<strong>重载运算符</strong>时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。选择最合适的重载函数或重载运算符的过程，称为<strong>重载决策</strong>。</p>
<p>您可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。</p>
<p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Box operator+(const Box&amp;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数。</p>
<p>多态</p>
<p><strong>多态</strong>按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p>
<p>C++ 多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。</p>
<p>虚函数</p>
<p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p>
<p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p>
<p>数据抽象</p>
<p>数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。</p>
<p>数据抽象是一种依赖于接口和实现分离的编程（设计）技术。</p>
<p>让我们举一个现实生活中的真实例子，比如一台电视机，您可以打开和关闭、切换频道、调整音量、添加外部组件（如喇叭、录像机、DVD 播放器），但是您不知道它的内部实现细节，也就是说，您并不知道它是如何通过缆线接收信号，如何转换信号，并最终显示在屏幕上。</p>
<p>因此，我们可以说电视把它的内部实现和外部接口分离开了，您无需知道它的内部实现原理，直接通过它的外部接口（比如电源按钮、遥控器、声量控制器）就可以操控电视。</p>
<p>现在，让我们言归正传，就 C++ 编程而言，C++ 类为<strong>数据抽象</strong>提供了可能。它们向外界提供了大量用于操作对象数据的公共方法，也就是说，外界实际上并不清楚类的内部实现。</p>
<p>例如，您的程序可以调用 <strong>sort()</strong> 函数，而不需要知道函数中排序数据所用到的算法。实际上，函数排序的底层实现会因库的版本不同而有所差异，只要接口不变，函数调用就可以照常工作。</p>
<p>在 C++ 中，我们使用<strong>类</strong>来定义我们自己的抽象数据类型（ADT）。您可以使用类 <strong>iostream</strong> 的 <strong>cout</strong> 对象来输出数据到标准输出。</p>
<p>接口</p>
<p>接口描述了类的行为和功能，而不需要完成类的特定实现。</p>
<p>C++ 接口是使用<strong>抽象类</strong>来实现的，抽象类与数据抽象互不混淆，数据抽象是一个把实现细节与相关的数据分离开的概念。</p>
<p>如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。纯虚函数是通过在声明中使用 “= 0” 来指定的。</p>
<p>文件和流</p>
<p>C++ 中另一个标准库 <strong>fstream</strong>，它定义了三个新的数据类型：</p>
<table>
<thead>
<tr>
<th align="left">数据类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ofstream</td>
<td align="left">该数据类型表示输出文件流，用于创建文件并向文件写入信息。</td>
</tr>
<tr>
<td align="left">ifstream</td>
<td align="left">该数据类型表示输入文件流，用于从文件读取信息。</td>
</tr>
<tr>
<td align="left">fstream</td>
<td align="left">该数据类型通常表示文件流，且同时具有 ofstream 和 ifstream 两种功能，这意味着它可以创建文件，向文件写入信息，从文件读取信息。</td>
</tr>
</tbody></table>
<p>要在 C++ 中进行文件处理，必须在 C++ 源代码文件中包含头文件 <iostream> 和 <fstream>。</fstream></iostream></p>
<p>在从文件读取信息或者向文件写入信息之前，必须先打开文件。<strong>ofstream</strong> 和 <strong>fstream</strong> 对象都可以用来打开文件进行写操作，如果只需要打开文件进行读操作，则使用 <strong>ifstream</strong> 对象。</p>
<p>下面是 open() 函数的标准语法，open() 函数是 fstream、ifstream 和 ofstream 对象的一个成员。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void open(const char *filename, ios::openmode mode);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;fstream&gt;
#include &lt;iostream&gt;
using namespace std;
 
int main ()
&#123;
    
   char data[100];
 
   &#x2F;&#x2F; 以写模式打开文件
   ofstream outfile;
   outfile.open(&quot;afile.dat&quot;);
 
   cout &lt;&lt; &quot;Writing to the file&quot; &lt;&lt; endl;
   cout &lt;&lt; &quot;Enter your name: &quot;; 
   cin.getline(data, 100);
 
   &#x2F;&#x2F; 向文件写入用户输入的数据
   outfile &lt;&lt; data &lt;&lt; endl;
 
   cout &lt;&lt; &quot;Enter your age: &quot;; 
   cin &gt;&gt; data;
   cin.ignore();
   
   &#x2F;&#x2F; 再次向文件写入用户输入的数据
   outfile &lt;&lt; data &lt;&lt; endl;
 
   &#x2F;&#x2F; 关闭打开的文件
   outfile.close();
 
   &#x2F;&#x2F; 以读模式打开文件
   ifstream infile; 
   infile.open(&quot;afile.dat&quot;); 
 
   cout &lt;&lt; &quot;Reading from the file&quot; &lt;&lt; endl; 
   infile &gt;&gt; data; 
 
   &#x2F;&#x2F; 在屏幕上写入数据
   cout &lt;&lt; data &lt;&lt; endl;
   
   &#x2F;&#x2F; 再次从文件读取数据，并显示它
   infile &gt;&gt; data; 
   cout &lt;&lt; data &lt;&lt; endl; 
 
   &#x2F;&#x2F; 关闭打开的文件
   infile.close();
 
   return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>异常处理</p>
<p>异常是程序在执行期间产生的问题。C++ 异常是指在程序运行时发生的特殊情况，比如尝试除以零的操作。</p>
<p>异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：<strong>try、catch、throw</strong>。</p>
<ul>
<li><strong>throw:</strong> 当问题出现时，程序会抛出一个异常。这是通过使用 <strong>throw</strong> 关键字来完成的。</li>
<li><strong>catch:</strong> 在您想要处理问题的地方，通过异常处理程序捕获异常。<strong>catch</strong> 关键字用于捕获异常。</li>
<li><strong>try:</strong> <strong>try</strong> 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。</li>
</ul>
<p>如果有一个块抛出一个异常，捕获异常的方法会使用 <strong>try</strong> 和 <strong>catch</strong> 关键字。try 块中放置可能抛出异常的代码，try 块中的代码被称为保护代码。</p>
<p>动态内存</p>
<p>C++ 程序中的内存分为两个部分：</p>
<ul>
<li><strong>栈：</strong>在函数内部声明的所有变量都将占用栈内存。</li>
<li><strong>堆：</strong>这是程序中未使用的内存，在程序运行时可用于动态分配内存。</li>
</ul>
<p>很多时候，您无法提前预知需要多少内存来存储某个定义变量中的特定信息，所需内存的大小需要在运行时才能确定。</p>
<p>在 C++ 中，您可以使用特殊的运算符为给定类型的变量在运行时分配堆内的内存，这会返回所分配的空间地址。这种运算符即 <strong>new</strong> 运算符。</p>
<p>如果您不再需要动态分配的内存空间，可以使用 <strong>delete</strong> 运算符，删除之前由 new 运算符分配的内存。</p>
<p>命名空间</p>
<p>假设这样一种情况，当一个班上有两个名叫 Zara 的学生时，为了明确区分它们，我们在使用名字之外，不得不使用一些额外的信息，比如他们的家庭住址，或者他们父母的名字等等。</p>
<p>同样的情况也出现在 C++ 应用程序中。例如，您可能会写一个名为 xyz() 的函数，在另一个可用的库中也存在一个相同的函数 xyz()。这样，编译器就无法判断您所使用的是哪一个 xyz() 函数。</p>
<p>因此，引入了<strong>命名空间</strong>这个概念，专门用于解决上面的问题，它可作为附加信息来区分不同库中相同名称的函数、类、变量等。使用了命名空间即定义了上下文。本质上，命名空间就是定义了一个范围。</p>
<p>我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。</p>
<p>命名空间的定义使用关键字 <strong>namespace</strong>，后跟命名空间的名称。</p>
<pre class="line-numbers language-none"><code class="language-none">namespace namespace_name &#123;
   &#x2F;&#x2F; 代码声明
&#125;
name::code;  &#x2F;&#x2F; code 可以是变量或函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>预处理器</p>
<p>预处理器是一些指令，指示编译器在实际编译之前所需完成的预处理。</p>
<p>所有的预处理器指令都是以井号（#）开头，只有空格字符可以出现在预处理指令之前。预处理指令不是 C++ 语句，所以它们不会以分号（;）结尾。</p>
<p>我们已经看到，之前所有的实例中都有 <strong>#include</strong> 指令。这个宏用于把头文件包含到源文件中。</p>
<p>C++ 还支持很多预处理指令，比如 #include、#define、#if、#else、#line 等。</p>
<p>#define 预处理指令用于创建符号常量。该符号常量通常称为<strong>宏</strong>。</p>
<p>有几个指令可以用来有选择地对部分程序源代码进行编译。这个过程被称为条件编译。</p>
<p>条件预处理器的结构与 if 选择结构很像。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifdef NULL
   #define NULL 0
#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>MtaLab笔记</title>
    <url>/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%createavectorxbetween0and6</span>
y1<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
y2<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y3<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>matlab很强大，很强大。</p>
<pre class="line-numbers language-none"><code class="language-none">退出和中断

exit、quit结束matlab会话，程序完成，如果没有明确的保存，则变量中的数据会丢失。

Ctrl+C中断一个matlab任务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在matlab中，矩阵是数据的基本格式。</p>
<p>二维矩阵是一个以行列排列的矩形表，例如一个m行、n列的矩阵大小就是m<em>n，多维矩阵的维数大于2，就是说大小为m</em>n*…p</p>
<p>当行列为1时，此时只有一个量，也就是标量，只有一个数。</p>
<p>一个变量可以通过分配一个值来定义他。</p>
<p>二维矩阵的实现</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
<span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>简单的两种方式，前者用分号作为一行的结束，后者直接写出来。</p>
<p>定义行向量与列向量</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">row_l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
column_l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>逐个元素的分配矩阵：</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>
C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于三维矩阵，一般的理解为在自变量中依次使用行、列和页维数次序，对于多维矩阵有两个索引原理，最自然的就是矩阵索引，他给出了每个元素在每一维的一个位置。</p>
<p>另外一个索引原理是线性索引，一些命令把整个索引说明为一个长列元素，如果所有元素都在一行上，那么对于各个元素给定的一个线性索引号说明了一个指定矩阵的索引给出的某个位置。</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">D<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
E<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">F</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span>A<span class="token punctuation">;</span>
<span class="token function">F</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span>B<span class="token punctuation">;</span>
F
<span class="token function">F</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用两个二维矩阵构建一个三维矩阵，再修改一下三维矩阵内一个元素。</p>
<p>matlab允许在一行上定义多个变量，也可以在换行时使用三个点来在下一行继续输入。</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>z<span class="token operator">=</span><span class="token number">0.1212121312</span><span class="token punctuation">;</span>
A_1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token punctuation">...</span>
<span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>为了获取变量的维数，可以使用size和length。</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">size</span><span class="token punctuation">(</span>A_1<span class="token punctuation">)</span>
<span class="token function">length</span><span class="token punctuation">(</span>A_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>size，输出顺序为行数、列数、页数等。</p>
<p>（3，7）</p>
<p>length，给出一个向量的长度。行向量就给出列数，列向量就给出行数。</p>
<p>（7）</p>
<p>如果此时，简单的嵌套：</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">length</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>A_1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">ndims</span><span class="token punctuation">(</span>A_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>（2）</p>
<p>就能顺利的得到维数。当然使用ndims函数也能快速的得到维数。</p>
<p>sub2ind()特殊的函数，首先在matlab之中，数据有索引，即使是矩阵。</p>
<p>但是数据是按列的方式存储，所以是按照列来计算索引的。</p>
<p>sub2ind就是把下标转化为索引。</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">sub2ind</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>A_1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如图，A_1是一个3<em>7的矩阵，那么这段语句的含义就是求一个3</em>7矩阵的第2行第3列的索引。</p>
<p>ind2sub()将线性索引转化为下标。</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">ind2sub</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>A_1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也就是，求一个3*7矩阵索引为2的元素在第几行第几列。</p>
<p>多维矩阵的转换：</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">sub2ind</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将一个三行、三列、两页的矩阵的第一行、第二列、第二页的元素转化为索引：13。</p>
<p>变量</p>
<p>变量名可以有19个字符，由字母大小写、下划线和数字作为变量名，但只能由字母开头。</p>
<p>matlab是区分大小写的。在变量使用之前，不需要指定变量的数据类型，也不需要声明变量。</p>
<pre class="line-numbers language-none"><code class="language-none">double是一个双精度浮点数，每个存储的双精度数用64位。

char用于存储字符，每个存储的字符用16位。

sparse用于存储稀疏矩阵，由一个sparse使用的内存是4+(非零元素数*16)。

unit8是一个无符号的8位整型数。数学函数并不对使用到的这种数据类型进行定义，如存储图像。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>逻辑函数</p>
<pre class="line-numbers language-none"><code class="language-none">iscell(x)如果x是一个细胞矩阵，返回1；否则为0。

isfield(x)如果x在一个结构中是一个域，返回1；否则为0。可参见第12.5节。

isfinite(x)返回一个与x相同大小的向量，这个x包含有限元的位置为1，其他位置为0。

islogical(x)如果x是一个逻辑向量，返回1；否则为0。

isnumeric(x)如果x是一个数值向量，返回1；否则为0。

isstr(x)如果x是一个字符串，返回1；否则为0。

isstruct(x)如果x是一个结构，返回1；否则为0。

isobject(x)如果x是一个对象，返回1；否则为0。

logical(x)返回一个可以使用的逻辑向量，例如逻辑索引或逻辑测试。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>预定义变量</p>
<pre class="line-numbers language-none"><code class="language-none">ans分配最新计算表达式的值，这个表达式并没有给定一个名字。

eps返回机器精度，定义1与最接近可代表的浮点数之间的差。eps数在一些命令中用作偏差。用户可以设定一个新的eps值，但要注意这个eps值不能由命令clear恢复。realmax返回计算机能处理的最大浮点数。

realmin返回计算机能处理的最小的非零浮点数。

pi返回p，即3.141592653589793，如果eps足够小，那么用16位十进制数来表示其精度。

inf定义为1&#x2F;0。当出现被零除时，MATLAB就返回inf，并不中断执行而继续计算。NaN定义为“NotaNumber”，这个非数值要么是％类型，要么是inf&#x2F;inf。

i，j定义为（-1）的1&#x2F;2次方，虚数单位。可以为i和j分配其他值，它们将不再是预定义常数。可以由clear命令恢复。

nargin给出在一个函数调用中输入自变量的个数。

nargout给出在一个函数调用中输出自变量的个数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>变量列表</p>
<pre class="line-numbers language-none"><code class="language-none">who列出已定义的变量。

Whoglobal与who相同，但仅列出全局变量。

whoa*给出所有以a开头的变量的一个列表。

whos给出比命令who更详细的列表，如显示矩阵的维数。

whosglobal与whos相同，但仅列出全局变量。

exist(namestr)根据在字符串namestr中的变量的定义，返回不同的值。这里要注意的重要的一点是变量名应在引号‘’之间给出。函数返回值的情况是：

1）表示namestr是一个变量名；2)表示namestr是一个M文件名；3)表示namestr是一个MEX文件名；4)表示namestr是一个编译的SIMULINK函数；5)表示namestr是一个预定义的MATLAB函数名。

inmem返回一个带字符串的细胞向量，这个字符串包含目前在内存中的函数、M文件。如果给出两个输出参数，则第二个包含了一个目前在内存中的MEX文件的列表。

workspace对由whos得到的信息给出一个图形界面。命令clear被集成在这个环境中。由helpworkspace给出的信息，也在UNIX下工作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>删除变量和合并</p>
<pre class="line-numbers language-none"><code class="language-none">clear删除所有变量并恢复除eps外的所有预定义变量。当运行文件时的clear。

clearname仅删除变量name。

clearname1name2删除变量name1、name2、……

cleara*删除所有a开头的变量。

clearvalue根据value给出不同的结果。键入helpclear可得到更多的细节。

pack重组和压缩已分配的内存碎块。当MATLAB的内存满后，可以使用命令pack而不是清除任何变量来得到更多的空间。将会产生如下情况：•所有变量都会保存在磁盘上的一个临时文件pack.tmp中；•删除主内存中的内容；•所有变量将从pack.tmp加载到主内存中；•删除文件pack.tmp。

packfilename用文件filename作临时文件，重组和压缩已分配内存。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>算数运算符扩展集</p>
<p>“^”幂</p>
<p>“*”乘<br>“/”右除(正常除)<br>“\”左除<br>“+”加<br>“－”减</p>
<p>优先级从上到下降低。</p>
<p>其中右除和左除表示的为分数，区别在于右除为分母在后，左除为分母在前。</p>
<p>数学函数</p>
<pre class="line-numbers language-none"><code class="language-none">abs(x)求x的绝对值，即|x|。

sign(x)求x的符号，如果是正的得1；负的得－1；零得0。

sqrt(x)求x的平方根。

pow2(x,f)求x*2&lt;sub&gt;f&lt;&#x2F;sub&gt;。把f加到x的浮点格式下的指数上计算是一种十分有效的运算。

exp(x)求x的指数函数，即e&lt;sub&gt;x&lt;&#x2F;sub&gt;。log(x)求x的自然对数，即lnx。

log&lt;sup&gt;10&lt;&#x2F;sup&gt;(x)求x以10为底的对数，即log&lt;sup&gt;10&lt;&#x2F;sup&gt;x。

log&lt;sup&gt;2&lt;&#x2F;sup&gt;(x)求x以2为底的对数，即log&lt;sup&gt;2&lt;&#x2F;sup&gt;x。

sin(x)求正弦x，x为弧度。

cos(x)求余弦x，x为弧度。

tan(x)求正切x，x为弧度。

cot(x)求余切x，即1&#x2F;(tanx)，x为弧度。

asin(x)求反正弦，即sin&lt;sub&gt;－1&lt;&#x2F;sub&gt;x。

acos(x)求反余弦，即cos&lt;sub&gt;－1&lt;&#x2F;sub&gt;x。

atan(x)求反正切，即tan&lt;sub&gt;－1&lt;&#x2F;sub&gt;x。

atan2(x,y)求四象限反正切(x&#x2F;y)，其结果在[－pi，pi]区间内。

acot(x)求反余切x&#x3D;四象限反正切(1&#x2F;x)。

sec(x)求正割x，即1&#x2F;(cosx)。

csc(x)求余割x，即1&#x2F;(sinx)。

asec(x)求sec&lt;sub&gt;－1&lt;&#x2F;sub&gt;x&#x3D;arccos(1&#x2F;x)。acsc(x)求csc&lt;sub&gt;－1&lt;&#x2F;sub&gt;x&#x3D;arcsin(1&#x2F;x)。

sinh(x)求双曲正弦x。

cosh(x)求双曲余弦x。

tanh(x)求双曲正切x

coth(x)求双曲余切x，即1&#x2F;(tanhx)。asinh(x)求sinh的反函数

acosh(x)求cosh的反函数

atanh(x)求tanhx的反函数

acoth(x)求cothx的反函数

sech(x)求双曲正割x，即1&#x2F;(coshx)。csch(x)求双曲余割x，即1&#x2F;(sinhx)。asech(x)求sechx的反函数

acsch(x)求cschx的反函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>取整命令和有关命令</p>
<pre class="line-numbers language-none"><code class="language-none">round(x)求最接近x的整数。如果x是一个向量，则适用于所有元素。

fix(x)求0方向最接近x的整数。即负x向上四舍五入，正x向下四舍五入。

floor(x)求小于或等于x的最接近的整数。

ceil(x)求大于或等于x的最接近的整数。rem(x,y)求整除x&#x2F;y的余数。

gcd(x,y)求整数x和y的最大公因子。[g,c,d]&#x3D;gcd(x，y)求g，c，d，满足g&#x3D;xc+yd。

lcm(x，y)求正整数x和y的最小公倍数，也能用于决定最小公因子。

[t，n]&#x3D;rat(x)由有理数t&#x2F;n求x的近似值，这里的t和n是整数，相对误差小于10－6。它给出了对应的字符串。[t，n]&#x3D;rat(x，tol)与上相同，但相对误差小于tol。

rat(x)求x的连续的分数表达式。

rat(x，tol)求带相对误差tol的x的连续的分数表达式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有关复数的函数</p>
<pre class="line-numbers language-none"><code class="language-none">real(z)求z的实部。

imag(z)求z的虚部。

abs(z)求z的绝对值，即|z|。

conj(z)求z的复数共扼。

angle(z)求z的相角，即z&#x3D;x+iy&#x3D;rei中的。

unwrap(v)求与v相同长度的向量。这里，两个相邻元素间的相角差已经改变，因此，差最大为pi。

unwrap(v,k)求出如上的一个向量，但用转移偏差k代替pi。

cplxpair(v)给出一个v中各元素按实部递增排序，并使其复数组合成复数共扼对的一个向量。在一个共扼对中，负虚部在前，实元素排在向量的后部。如果v的一个元素在v中没有它自己的复数共扼，则显示一个错误信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>坐标转换</p>
<p><img src="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020209529.png" class="lazyload placeholder" data-srcset="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020209529.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p><img src="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020220778.png" class="lazyload placeholder" data-srcset="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020220778.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p>特殊的数学函数</p>
<p><img src="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020239760.png" class="lazyload placeholder" data-srcset="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020239760.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p><img src="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020252000-16620556025935.png" class="lazyload placeholder" data-srcset="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020252000-16620556025935.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p>浮点运算计数器</p>
<p><img src="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020819799.png" class="lazyload placeholder" data-srcset="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020819799.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p>时间和日期</p>
<p><img src="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020930265.png" class="lazyload placeholder" data-srcset="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020930265.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p><img src="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020943297.png" class="lazyload placeholder" data-srcset="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902020943297.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p><img src="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902021005621.png" class="lazyload placeholder" data-srcset="/2022/08/30/MtaLab%E7%AC%94%E8%AE%B0/image-20220902021005621.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
]]></content>
      <tags>
        <tag>MatLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Python装饰器</title>
    <url>/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Python-装饰器"><a href="#Python-装饰器" class="headerlink" title="Python 装饰器"></a>Python 装饰器</h1><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>在Python中，函数也是一个对象，可以被当做参数传递，可以在另一个函数中调用，也可以实现函数的嵌套。</p>
<p>所以，利用这个特性，我们可以写出一段测试功能运行时长的代码。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am function!"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I have finished my work!"</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    startTime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    func<span class="token punctuation">(</span><span class="token punctuation">)</span>
    enfTime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"script spend time is"</span><span class="token punctuation">,</span> enfTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span>


index<span class="token punctuation">(</span>function<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样的想法乍一看很好，但其实这从本质上看，不是改变了function函数的功能，而是创建了一个新的函数，而后将function融合进了这个函数里，最终实际上对function函数的一个包装，使它成为了一个新的函数，来实现功能。</p>
<p>那么，如果我们想要直接调用function函数就能实现像程序计时这样的功能呐？（要注意，我们做的一切都要建立在不更改function函数任何代码的前提之下。）</p>
<p>Python中有装饰器可以帮助我们更好的实现这样的功能。</p>
<p>装饰器的本质还是函数，他的作用是去装饰另外一个函数，而在程序计时这样的场景里，我们就需要根据我们要计时的程序，去编写一个计时的函数，这个计时的函数就是装饰器。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I doing some work"</span><span class="token punctuation">)</span>
        func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am end!"</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> test_time


<span class="token decorator annotation punctuation">@index</span>
<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am function!"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I have finished my work!"</span><span class="token punctuation">)</span>


function<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们使用了装饰器的语法糖，@加函数名的形式，这其实就相当于一个index(function)，但是因为他的本质是装饰，因此在function不执行的情况下，程序也不会执行。</p>
<p>最后我们直接调用function函数，就能顺利的完成程序计时的功能。</p>
<p>这看起来似乎还有一点问题，但其实是因为此处应用的场景有一点点问题，作为程序计时来说，并不需要把这个功能焊死在函数里，但是这样的使用，似乎把计时焊死在了原来的函数内部。</p>
<p>其实换一个应用场景就好了，例如在flask等web框架里，我们针对用户授权的时候，一个小小的装饰器就能解决。</p>
<h2 id="装饰器带参数"><a href="#装饰器带参数" class="headerlink" title="装饰器带参数"></a>装饰器带参数</h2><p>首先是，装饰的对象带参数。</p>
<p><img src="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826120832286.png" class="lazyload placeholder" data-srcset="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826120832286.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826120832286"></p>
<p>如图，尽管我已经在调用的时候加入了参数，但是最终依然报错了。</p>
<p><img src="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826120904793.png" class="lazyload placeholder" data-srcset="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826120904793.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826120904793"></p>
<p>因为在装饰器中，我运行了这个函数，但是此时我是没有带参数的。</p>
<p><img src="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826120944616.png" class="lazyload placeholder" data-srcset="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826120944616.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826120944616"></p>
<p>并且值得注意的是，函数的参数可以很长，因为如果我们直接写参数的话，好像有点不对劲。</p>
<p>于是我们简单的使用一样python中的动态参数。</p>
<p><img src="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826121202910.png" class="lazyload placeholder" data-srcset="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826121202910.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826121202910"></p>
<p>这其实很简单，不用动态参数，你手动加入参数也可以。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_time</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I doing some work"</span><span class="token punctuation">)</span>
        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am end!"</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> test_time


<span class="token decorator annotation punctuation">@index</span>
<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am function!"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I have finished my work!"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>


function<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>装饰器带参数</p>
<p>这是另外一个问题，我们希望给装饰器带上参数，使得它使用起来更加的灵活，如果你见过flask的代码，那么就应该见过装饰器带参数的情况。、</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I doing some work"</span><span class="token punctuation">)</span>
            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I request the "</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am end!"</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> Timer
    <span class="token keyword">return</span> test_time


<span class="token decorator annotation punctuation">@index</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am function!"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I have finished my work!"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>


function<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如上，这就是一个带参数的装饰器。</p>
<p>你可能发现了装饰器上三层的函数嵌套，并且写出了内两层的返回值，这是不可缺少的。</p>
<p>我们将它写成最开始的形式;</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am function!"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I have finished my work!"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> func<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    startTime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    enfTime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"script spend time is"</span><span class="token punctuation">,</span> enfTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I request the "</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    <span class="token keyword">return</span> index


index<span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">,</span> function<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以发现此时再使用这种形式，整个函数的调用就变得异常的繁琐和麻烦了起来。</p>
<h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>或许叫他装饰器类更加合适，比起一般的函数形式的装饰器，</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time


<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_url <span class="token operator">=</span> url

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func is starting!"</span><span class="token punctuation">)</span>
            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I request the "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>_url<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func is ending!"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrap


<span class="token decorator annotation punctuation">@Foo</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am function!"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I have finished my work!"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span>


function<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="装饰器嵌套"><a href="#装饰器嵌套" class="headerlink" title="装饰器嵌套"></a>装饰器嵌套</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo01</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_url <span class="token operator">=</span> url

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>

            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I request the "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>_url<span class="token punctuation">)</span>


        <span class="token keyword">return</span> wrap


<span class="token keyword">class</span> <span class="token class-name">Foo02</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_url <span class="token operator">=</span> url

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>

            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The IP"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>_url<span class="token punctuation">)</span>


        <span class="token keyword">return</span> wrap


<span class="token keyword">class</span> <span class="token class-name">Foo03</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_url <span class="token operator">=</span> url

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>

            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The UA"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>_url<span class="token punctuation">)</span>


        <span class="token keyword">return</span> wrap


<span class="token decorator annotation punctuation">@Foo03</span><span class="token punctuation">(</span><span class="token string">"&#123;'User_Agent':'*****'&#125;"</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@Foo02</span><span class="token punctuation">(</span><span class="token string">"192.168.121.130"</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@Foo01</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>


function<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826125058086.png" class="lazyload placeholder" data-srcset="/2022/08/26/Python%E8%A3%85%E9%A5%B0%E5%99%A8/image-20220826125058086.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826125058086"></p>
<p>由此可以发现，装饰器的运行是按照和函数的距离来决定的，越近就越先执行。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+vue（2）</title>
    <url>/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<p>写点基础的东西。</p>
<h2 id="Web入门"><a href="#Web入门" class="headerlink" title="Web入门"></a>Web入门</h2><p>Spring Boot是把传统的mvc、json、tomcat等框架结合起来，提供了start-web等组件，简化了应用配置。</p>
<p>创建项目时，选择SpringWeb，会自动把启动器加入到项目中，其中mvc、json、Tomcat包含在启动器类。</p>
<p>mvc作为开发的基础框架、json作为数据解析组件、tomcat作为自带容器。</p>
<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>Spring Boot中提供了两种注解来标识这个类负责接收和处理HTTP请求。</p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826224548498.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826224548498.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826224548498"></p>
<p>其中这两种注解，RestController默认的情况下，会将返回的对象转为JSON格式。</p>
<p>Controller用于请求页面和数据中，一般的和Thymeleaf模板引擎配合使用。</p>
<h3 id="路由映射"><a href="#路由映射" class="headerlink" title="路由映射"></a>路由映射</h3><p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826225000008.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826225000008.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826225000008"></p>
<p>该注解主要负责URL的路由映射，他可以添加在Controller类或者具体的方法上。</p>
<p>如果是在Controller类上，那么类中的所有路由映射都带有这个映射规则，如果在方法上，那么只对方法生效。</p>
<p>该注解包含很多属性参数来定义HTTP的请求映射规则，常用的属性参数有：value（URl路径，支持正则）、method（请求方法，GET、POST）、consumes（请求的媒体类型、Content-TYPE、json）、produces（响应的媒体类型）、params、headers（请求参数和请求头）。</p>
<p>其中，对于method的匹配，可以使用</p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826225543824.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826225543824.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826225543824"></p>
<p>以下的注解来替代，DELETE也可以。</p>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>是指前端传递参数。</p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233231779.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233231779.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826233231779"></p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233253766.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233253766.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826233253766"></p>
<p>@RequestParam将请求参数绑定到控制器的方法参数上，接收的参数来自HTTP请求体或请求url的QueryString。当请求的参数名称与Controller的业务方法参数名称一致时,@RequestParam可以省略。</p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233620168.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233620168.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826233620168"></p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233625631.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233625631.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826233625631"></p>
<p>此时，明显的，参数名称与方法内名称不一致，但是由于使用了注解@RequestParam的关系，使得正常运行，这相当于一个参数映射，使得两者绑定。</p>
<p>但是要注意的是，使用了该注解之后，就必须传递该参数，否则将出现错误。</p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233934434.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826233934434.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826233934434"></p>
<p>想要解决，只需要在注解内加上参数。</p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826234010887.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826234010887.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826234010887"></p>
<p>如果参数很多的话，我们可以把参数封装到对象内。</p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826234659659.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826234659659.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826234659659"></p>
<p>一般的，可以选择使用json来封装数据，但是此时就需要使用如下的注解。</p>
<p><img src="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826234642746.png" class="lazyload placeholder" data-srcset="/2022/08/26/springboot-vue%EF%BC%882%EF%BC%89/image-20220826234642746.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826234642746"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+vue（3）</title>
    <url>/2022/08/27/springboot-vue%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><p>如果你使用的是IDEA创建项目，那么会默认创建出static目录。静态资源一般来说放在这个目录下。</p>
<p><img src="/2022/08/27/springboot-vue%EF%BC%883%EF%BC%89/image-20220827201530131.png" class="lazyload placeholder" data-srcset="/2022/08/27/springboot-vue%EF%BC%883%EF%BC%89/image-20220827201530131.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220827201530131"></p>
<p>如果默认的的策略无法满足开发需求，也可以在application.properties中自定义</p>
<p><img src="/2022/08/27/springboot-vue%EF%BC%883%EF%BC%89/image-20220827201701938.png" class="lazyload placeholder" data-srcset="/2022/08/27/springboot-vue%EF%BC%883%EF%BC%89/image-20220827201701938.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220827201701938"></p>
<p>前者为过滤规则，或者为静态资源位置。</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>表单的enctype属性规定在发送到服务器之前应该如何对表单数据进行编码。</p>
<p>不设置这个属性，即这个属性保持默认值，此时form表单内的数据格式为：key=value&amp;key=value</p>
<p>在Springboot工程中，嵌入的tomcat限制了请求的文件大小，每个文件的配置最大1Mb，单次请求文件总数不能大于10Mb，要更改这个默认值，在application.properties中加入配置：</p>
<p><img src="/2022/08/27/springboot-vue%EF%BC%883%EF%BC%89/image-20220827202246300.png" class="lazyload placeholder" data-srcset="/2022/08/27/springboot-vue%EF%BC%883%EF%BC%89/image-20220827202246300.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220827202246300"></p>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器在Web中很常见，对于一些全局统一的操作，放到拦截器里实现。</p>
<p>权限检查、性能监控、通用行为（读cookie等只要是多个程序需要的）</p>
<p>Spring Boot定义了HandlerInterceptor接口来实现自定义拦截器的功能</p>
<p>HandlerInterceptor接口定义了preHandle、postHandle、afterCompletion三种方法，通过重写这三种方法实现请求前、请求后等操作。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>拦截器注册</p>
<p>addPathPatterns方法定义拦截的地址</p>
<p>excludePathPatterns定义排除某些地址不被拦截</p>
<p>添加的一个拦截器没有addPathPattern任何一个url则默认拦截所有请求</p>
<p>如果没有excludePathPatterns任何一个请求，则默认不放过任何一个请求。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1<span class="token punctuation">.</span>configuration</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1<span class="token punctuation">.</span></span><span class="token class-name">Handler</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfiger</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+vue（4）</title>
    <url>/2022/08/27/springboot-vue%EF%BC%884%EF%BC%89/</url>
    <content><![CDATA[<h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>这是目前比较流行的互联网软件服务架构设计风格。</p>
<p>REST并不是一个标准，它更像一组客户端和服务端交互时的架构理念和设计原则，基于这种架构理念和设计原则的Web API更加简洁，更有层次。</p>
<p><strong>每一个URI代表一种资源</strong></p>
<p>客户端使用GET、POST、PUT、DELETE四种表示操作方式的动词对服务端资源进行操作：GET用于获取资源，POST用于新建资源（也可以用于更新资源），PUT用于更新资源，DELETE用于删除资源。</p>
<p>通过操作资源的表现形式来实现服务端请求操作。</p>
<p>资源的表现形式是JSON或者HTML。</p>
<p>客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都包含必需的信息。</p>
<p>符合RESTful规范的Web API需要具备如下两个关键特性：</p>
<p>安全性：安全的方法被期望不会产生任何副作用，当我们使用GET操作获取资源时，不会引起资源本身的改变，也不会引起服务器状态的改变。</p>
<p>幂等性：幂等的方法保证了重复进行一个请求和一次请求的效果相同（并不是指响应总是相同的，而是指服务器上资源的状态从第一次请求后就不再改变了），在数学上幂等性是指N次变换和一次变换相同。</p>
<h2 id="HTTP-Method"><a href="#HTTP-Method" class="headerlink" title="HTTP Method"></a>HTTP Method</h2><p><img src="/2022/08/27/springboot-vue%EF%BC%884%EF%BC%89/image-20220827203852479.png" class="lazyload placeholder" data-srcset="/2022/08/27/springboot-vue%EF%BC%884%EF%BC%89/image-20220827203852479.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220827203852479"></p>
<p>状态码</p>
<p>HTTP状态码就是服务向用户返回的状态码和提示信息，客户端的每一次请求，服务都必须给出回应，回应包括HTTP状态码和数据两部分。</p>
<p>HTTP定义了40个标准状态码，可用于传达客户端请求的结果。状态码分为以下5个类别：</p>
<p>1xx：信息，通信传输协议级信息</p>
<p>2xx：成功，表示客户端的请求已成功接受</p>
<p>3xx：重定向，表示客户端必须执行一些其他操作才能完成其请求</p>
<p>4xx：客户端错误，此类错误状态码指向客户端</p>
<p>5xx：服务器错误，服务器负责这写错误状态码</p>
<p><img src="/2022/08/27/springboot-vue%EF%BC%884%EF%BC%89/image-20220827204045162.png" class="lazyload placeholder" data-srcset="/2022/08/27/springboot-vue%EF%BC%884%EF%BC%89/image-20220827204045162.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220827204045162"></p>
<h2 id="Spring-Boot实现RESTful-API"><a href="#Spring-Boot实现RESTful-API" class="headerlink" title="Spring Boot实现RESTful API"></a>Spring Boot实现RESTful API</h2><p>Spring Boot提供的spring-boot-starter-web组件完全支持开发RESTful API，提供了与REST操作方式（GET、POST、PUT、DELETE）对应的注解。</p>
<p>@GetMapping：处理GET请求，获取资源。</p>
<p>@PostMapping：处理POST请求，新增资源。</p>
<p>@PutMapping：处理PUT请求，更新资源。</p>
<p>@DeleteMapping：处理DELETE请求，删除资源。</p>
<p>@PatchMapping：处理PATCH请求，用于部分更新资源。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1<span class="token punctuation">.</span>poji<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/&#123;id&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"user's id"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"add user"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"update user"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/user/&#123;id&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"delete user"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>Swagger是一个规范和完整的框架，用于生成、描述、调用和可视化RESTful风格的Web服务，是非常流行的API表达工具。</p>
<p>Swagger能够自动生成完善的RESTful API文档，，同时并根据后台代码的修改同步更新，同时提供完整的测试页面来调试API。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        swagger--></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1<span class="token punctuation">.</span>configuration</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfiger</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">creatRestApiDocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"top"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"XXAPI"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"study swagger2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要注意的是，springboot 2.6 之后和swagger有冲突。</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.mvc.pathmatch.matching-strategy</span><span class="token punctuation">=</span><span class="token attr-value">ant_path_matcher</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此时访问路径为：<a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></p>
<p>注意，文档中Swagger为3.0。</p>
<p><img src="/2022/08/27/springboot-vue%EF%BC%884%EF%BC%89/image-20220827214240354.png" class="lazyload placeholder" data-srcset="/2022/08/27/springboot-vue%EF%BC%884%EF%BC%89/image-20220827214240354.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220827214240354"></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>入门项目——学生成绩管理系统（demo）</title>
    <url>/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="学生成绩管理系统"><a href="#学生成绩管理系统" class="headerlink" title="学生成绩管理系统"></a>学生成绩管理系统</h1><h2 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h2><p>jdk 1.8以上即可</p>
<p>maven 3.6.1以上</p>
<p>mysql 8</p>
<p>idea 2021</p>
<p>JQuery</p>
<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>新建选择spring Initializr</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808191354776.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808191354776.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220808191354776"></p>
<p>指定项目名，路径，类型等信息。</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808191603691.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808191603691.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220808191603691"></p>
<p>指定导入的jar包，</p>
<p>spring web为前后端连接</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808191707878.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808191707878.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220808191707878"></p>
<p>在SQL下选择mybatis的jar包与sql的驱动，点击完成，等待一段时间，下载模板后，创建完成。</p>
<p>一般来说，idea会对每一个新建的项目进行一些类初始化的操作，例如依赖项等，因此我们往往需要等待一段时间，第一次可能会格外的慢。</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>建一个简单表，以后扩展。</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808192526607.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808192526607.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220808192526607"></p>
<p>数据库连接，我选择新建一个yaml文件</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/milk<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useUnicode=true&amp;characterEncoding=utf-</span><span class="token number">8</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试数据库连接</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808193722466.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808193722466.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220808193722466"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">StudentManagerApplicationTests</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果是idea可能在自动装配出报错，但是不用理他，直接运行，也可以在设置中将报错改为警告。</p>
<p>测试结果，输出连接池<img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808193850646.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808193850646.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220808193850646"></p>
<p>表示成功。</p>
<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>静态资源包括网页、js、css、图片等内容。</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808194009182.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808194009182.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220808194009182"></p>
<p>规定放在resources目录下（可以去看源码，但不建立此处个性化）。</p>
<p>其中，static为默认根目录，可以放任何资源，并且可以通过url直接访问（不用/static/）。</p>
<p>templates需要thymeleaf模板引擎，且无法直接被访问。</p>
<pre class="line-numbers language-maven" data-language="maven"><code class="language-maven">&lt;dependency&gt;
            &lt;groupId&gt;org.thymeleaf&lt;&#x2F;groupId&gt;
            &lt;artifactId&gt;thymeleaf&lt;&#x2F;artifactId&gt;
            &lt;version&gt;3.0.15.RELEASE&lt;&#x2F;version&gt;
        &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>建立首页</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808194516411.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808194516411.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220808194516411"></p>
<p>启动项目</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808194540454.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220808194540454.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220808194540454"></p>
<p>springboot的启动最为简单，直接运行启动类即可，啥都交给自动装配。</p>
<p>运行后再访问静态资源时，idea有时候可能会出bug，这是因为idea对js代码兼容较差出现的情况，有时候js不能正常的加载，此时可以通过清理缓存，maven项目的clean与install重新部署依旧rebuild重新构建等三种方式解决，当然也可以重启电脑。</p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="1、建立实体类（根据简单表）"><a href="#1、建立实体类（根据简单表）" class="headerlink" title="1、建立实体类（根据简单表）"></a>1、建立实体类（根据简单表）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此处使用了三个注解，分别表示get与set方法以及无参和有参构造的生成，使用注解前，需要先在pom.xml里引入lombok包。</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809101412761.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809101412761.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809101412761"></p>
<p>要注意，student实体类是需要在网络中传输的，因此我们需要对它序列化，很简单，实现接口就可以。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2、持久层"><a href="#2、持久层" class="headerlink" title="2、持久层"></a>2、持久层</h3><p>也就是mybatis来操作数据库</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Insert</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Select</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into student (id,name,sex) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;sex&#125;)"</span><span class="token punctuation">)</span>
    <span class="token class-name">Integer</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from student"</span><span class="token punctuation">)</span>
    <span class="token class-name">Student</span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from student where id = #&#123;id&#125;"</span><span class="token punctuation">)</span>
    <span class="token class-name">Student</span> <span class="token function">selectByID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此处，在构建mapper接口时，我直接用注解写进sql语句，而不去编写xml映射文件，两种方式有利有弊，但是无疑，注解在写这种小demo时，更快。</p>
<h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><p>一般的，每一层写完我们都需要单元测试</p>
<p>这时候发现，表的字段设置有误，修改一下。</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809102848382.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809102848382.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809102848382"></p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809103049557.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809103049557.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809103049557"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentMapperTest</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StudentMapper</span> studentMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">20220809</span><span class="token punctuation">,</span><span class="token string">"小王八"</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> rows <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectByID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentMapper<span class="token punctuation">.</span><span class="token function">selectByID</span><span class="token punctuation">(</span><span class="token number">20200809</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809103445768.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809103445768.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809103445768"></p>
<p>测试通过，要注意此处的变量rows是受改变的行数，也就是说，当行数小于1时，代表sql语句执行失败。</p>
<h3 id="4、业务层"><a href="#4、业务层" class="headerlink" title="4、业务层"></a>4、业务层</h3><p>接收前端数据</p>
<p>完成业务逻辑</p>
<h4 id="4-1-规划异常"><a href="#4-1-规划异常" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><p>异常的出现很正常，注册时用户名被占用，输入不符合规范都是异常。</p>
<p>在处理异常时，不用笼统的用runtime运行时来定位，因此需要细分。</p>
<p>此处，建立一个业务异常基类，一个用户ID占用子类，一个插入异常子类，还可扩展，省略。</p>
<p>关于异常的定义也很简单，此处就是一个小demo，写一下构造就可以。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">.</span>ex<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enableSuppression<span class="token punctuation">,</span> <span class="token keyword">boolean</span> writableStackTrace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">,</span> enableSuppression<span class="token punctuation">,</span> writableStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以用lombok，我是为了水字数。</p>
<p>再写两个异常，重写父类的构造就可以。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">.</span>ex<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDDuplicationException</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceException</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">IDDuplicationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">IDDuplicationException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">IDDuplicationException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">IDDuplicationException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">IDDuplicationException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enableSuppression<span class="token punctuation">,</span> <span class="token keyword">boolean</span> writableStackTrace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">,</span> enableSuppression<span class="token punctuation">,</span> writableStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">.</span>ex<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertException</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceException</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">InsertException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">InsertException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">InsertException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">InsertException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">InsertException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enableSuppression<span class="token punctuation">,</span> <span class="token keyword">boolean</span> writableStackTrace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">,</span> enableSuppression<span class="token punctuation">,</span> writableStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-2-设计接口"><a href="#4-2-设计接口" class="headerlink" title="4.2 设计接口"></a>4.2 设计接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">regiect</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>小demo，功能就写一个注册就行。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Mapper<span class="token punctuation">.</span>StudentMapper</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">.</span>ex<span class="token punctuation">.</span>IDDuplicationException<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">.</span>ex<span class="token punctuation">.</span>InsertException<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StudentMapper</span> studentMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regiect</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Integer</span> id <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Student</span> result <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectByID</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> sex <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IDDuplicationException</span><span class="token punctuation">(</span><span class="token string">"用户ID已经存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">Integer</span> rows <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InsertException</span><span class="token punctuation">(</span><span class="token string">"插入时出现未知异常！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>写上实现类，可以写在一个目录下，多了就可以拆分。</p>
<p>注意此处的实现类，因为要交给spring管理，因此必须加上service注解。</p>
<h4 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">.</span>ex<span class="token punctuation">.</span>ServiceException<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StudentService</span> studentService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regiect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">20220802</span><span class="token punctuation">,</span><span class="token string">"小扒菜"</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            studentService<span class="token punctuation">.</span><span class="token function">regiect</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServiceException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809110014533.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809110014533.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809110014533"></p>
<h3 id="5、控制层"><a href="#5、控制层" class="headerlink" title="5、控制层"></a>5、控制层</h3><h4 id="5-1-响应"><a href="#5-1-响应" class="headerlink" title="5.1 响应"></a>5.1 响应</h4><p>对于响应，一般的，我们都用状态码来描述，将这个功能封装到类里，将这个类作为方法的返回值给前端。</p>
<p>因为涉及到数据流，因此还是需要序列化。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Integer</span> state<span class="token punctuation">;</span>
    <span class="token class-name">String</span> message<span class="token punctuation">;</span>
    <span class="token class-name">E</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-2-请求"><a href="#5-2-请求" class="headerlink" title="5.2 请求"></a>5.2 请求</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">JsonResult</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service<span class="token punctuation">.</span>StudentService</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">.</span>ex<span class="token punctuation">.</span>IDDuplicationException<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">.</span>ex<span class="token punctuation">.</span>InsertException<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StudentService</span> studentService<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"reg"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">JsonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">reg</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">JsonResult</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> jsonResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            studentService<span class="token punctuation">.</span><span class="token function">regiect</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
            jsonResult<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jsonResult<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"注册成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IDDuplicationException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            jsonResult<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"ID重复，无法注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jsonResult<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InsertException</span> w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            jsonResult<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jsonResult<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"出现未知异常！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> jsonResult<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当然，对于控制层的业务，我们应该建立一个基类，针对不同业务做多态的扩展，但是此处只是一个小demo就不做了。</p>
<h3 id="6、前端页面"><a href="#6、前端页面" class="headerlink" title="6、前端页面"></a>6、前端页面</h3><p>前端页面，使用ajax来异步加载请求。</p>
<p>此处不用原生，使用JQuery。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-reg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ID ：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-reg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>立即注册<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn-reg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            url<span class="token operator">:</span> <span class="token string">"/student/reg"</span><span class="token punctuation">,</span>
            type<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
            data<span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form-reg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>
            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册失败！"</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">xhr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"未知错误"</span><span class="token operator">+</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>7、运行测试</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809111827983.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809111827983.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809111827983"></p>
<p>测试是否会重复ID</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809111856865.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809111856865.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809111856865"></p>
<p>注册功能完成。</p>
<p>完善一下。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-reg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ID ：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-reg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>立即注册<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn-reg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> sex <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sex option:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id ！<span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> name ！<span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"内容不能为空！"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">,</span>name<span class="token punctuation">,</span>id<span class="token punctuation">)</span>
            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                url<span class="token operator">:</span> <span class="token string">"/student/reg"</span><span class="token punctuation">,</span>
                type<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
                data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span>name<span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span>sex<span class="token punctuation">,</span><span class="token string">"id"</span><span class="token operator">:</span>id<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>
                <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册失败！"</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">xhr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"未知错误!"</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下来写登录</p>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p>用户登录的本质是根据账号查询密码，因此我们在sql语句之前，再次更新最开始的简单表。</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809165525367.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809165525367.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809165525367"></p>
<p>sql语句开发，后台方法已经写完。</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809165629992.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809165629992.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809165629992"></p>
<p>此处使用注解，也无需配置xml映射。</p>
<h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><h4 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h4><p>登录时异常较多，其中针对这个小demo，主要为密码错误，此处略过。</p>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>编写登录方法</p>
<p><img src="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809170235090.png" class="lazyload placeholder" data-srcset="/2022/08/08/%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220809170235090.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220809170235090"></p>
<p>实现登录方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Student</span> result <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectByID</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//            此处应抛出异常</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>登录时，密码等应加密，此处小demo，没用。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">20220809</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> password <span class="token operator">=</span> <span class="token number">11111</span><span class="token punctuation">;</span>
        studentService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServiceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><h4 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h4><p>首先处理登录功能，在业务层抛出的异常，此处未设置，略过。</p>
<h4 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h4><p>这一步是建立在注释内的一步，设计用户提交的请求，并且设计响应的方式。</p>
<p>包括但不限于，请求路径，请求参数，请求类型吗，相应结果等。</p>
<h4 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">JsonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">Student</span> data <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要注意的，此处返回值new的对象需要添加对应的构造方法。</p>
<h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-login<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--用户名--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ID：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--密码--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!--提交按钮--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-login<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn-login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        url<span class="token operator">:</span> <span class="token string">"/student/login"</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form-login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>
        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                $<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>avatar<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>expires<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"cookie中的avatar="</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"index.html"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"登录失败！"</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在MVC中，拦截请求是通过处理器拦截器器HandlerInterceptor来实现的，它拦截的目标是请求地址，即URL。在MVC在自定义一个拦截器，需要实现这个接口。</p>
<p>该拦截器有三大方法，在请求处理之前被调用的preHandle（）以及在当前请求进行处理之后被调用的postHandle（）和在整个请求结束之后的afterCompletion（）。</p>
<h4 id="添加拦截器"><a href="#添加拦截器" class="headerlink" title="添加拦截器"></a>添加拦截器</h4><p>项目中很多操作都需要登录后才可以直接执行，如果在每个请求前都去写检查session有没有登录信息，是非常不现实的。</p>
<p>创建拦截器类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Interceptor</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"login.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要注意，在springboot项目中，自定义一些拦截器、分解器、转换器。在1.5版本之前，是依靠重写WebMvcConfigurerAdapter类的方法，2.0版本之后，该类过时，因此只能靠实现WebMvcConfigurer接口来实现。</p>
<p>创建拦截器的配置类并实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span></span><span class="token class-name">Interceptor<span class="token punctuation">.</span>LoginInterceptor</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HandlerInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> patterns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        patterns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        patterns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        patterns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        patterns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        patterns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>patterns<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此时，我们就可以重新构建login方法，在登录成功也就是账号和密码与数据库匹配之后，将id与password存入httpsession对象中。（注意将css、js、图片等公共资源加入白名单。）</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>spring很好的支持了AOP。</p>
<p>在处理业务时，假设存在一个切面，在切面中可以定义方法，那么就只需要配置好连接点，就可以在不修改原有数据处理流程的代码的基础之上，就可以使得若干个流程都执行相同的代码。</p>
<h3 id="切面方法"><a href="#切面方法" class="headerlink" title="切面方法"></a>切面方法</h3><p>访问是public、返回值类型任意，但是在使用@around时，必须使用Object类型，并且返回连接点方法的返回值，如果是@before或者@after等注解，就自定义。</p>
<h3 id="统计业务时长"><a href="#统计业务时长" class="headerlink" title="统计业务时长"></a>统计业务时长</h3><p>在使用AOP之前，需要先引入相关的包。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>studentmanager<span class="token punctuation">.</span>aop</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeAspect</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* top.rczmm.studentmanager.Service.*.*(..))"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>

        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Object</span> result <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时："</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>反射与注解</title>
    <url>/2022/06/18/%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="反射与注解"><a href="#反射与注解" class="headerlink" title="反射与注解"></a>反射与注解</h1><p>jdk 1.5之后，java多了许多新的特性，其中一个很重要的机制，就是对元数据的支持，这种对元数据的支持，后来也被叫做注解。</p>
<p>注解的作用，使得开发者在改变原有逻辑的情况下，在源文件内嵌入一些补充的信息。</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="认识反射机制"><a href="#认识反射机制" class="headerlink" title="认识反射机制"></a>认识反射机制</h3><p>这是java很重要的一项技术支持。</p>
<p>首先，很朴素的一点是，我们首先考虑的是“反”与“正”的操作。所谓的“正”，即我们使用一个类的时候，一定要先导入程序所在的包，而后根据类进行实例化，并且依靠得到的对象调用方法。</p>
<p>那么“反”，其实就是根据对象来反推出其类型。</p>
<p>其中，反射的根源，应当是Class类，可以通过Object类中所提供的方法来获取一个Class实例。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 正 获取对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  反 由对象获取类信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h3 id="Class-类对象实例化"><a href="#Class-类对象实例化" class="headerlink" title="Class 类对象实例化"></a>Class 类对象实例化</h3><p>Class类是反射的起源，为了应对不同的情况，java为其提供了三种不同的实例化对象方式。</p>
<p>1、利用Object类的getClass（）方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 正 获取对象</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> a <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  反 由对象获取类信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>2、使用类.class的形式，获取指定类或者接口的Class实例化对象。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> a <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>要注意：直接通过一个类的完整名称可以获取class类实例，这就代表，要么import或者把类名写全，也就是要注意包名。</p>
<p>3、使用Class类内部提供的forName（）方法根据类的完整名称获取实例化对象。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> a <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.Date"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>第三种方法乍一看好像很麻烦，但实际上这种通过字符串获取class实力的方式，可以不适用import导入，并且由于字符串的支持较多并且拼接起来比较方便，十分的灵活。</p>
<p>当然，在使用forName的时候，请务必确保类存在。否则异常如下。</p>
<p><img src="/2022/06/18/%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/image-20220618211522778.png" class="lazyload placeholder" data-srcset="/2022/06/18/%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/image-20220618211522778.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220618211522778"></p>
<p>要注意，类存在更多指的是CLASSPATH环境属性中有该类。</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="认识注解"><a href="#认识注解" class="headerlink" title="认识注解"></a>认识注解</h3><p>注解是java对元数据的支持。</p>
<p>简单的来说，注解与注释相似，他们都不是程序本身，而是对程序做出解释，不同的是，注释是给开发者看的，而注解是用于编译器或者其他程序读取的。</p>
<p>javaSE中三类常见注解：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token comment">//重写注解</span>
<span class="token annotation punctuation">@Deprecated</span><span class="token comment">//不推荐使用注解，可以使用但是有风险或者有更好的方式（被淘汰）</span>
<span class="token annotation punctuation">@SuppressWarnings</span> <span class="token comment">//“镇压”警告注解（不推介使用）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>除了系统定义的，如同以上三类注解之外，用户也可以自定义注解。</p>
<p>java中自定义注解，需要用@interface进行标记，同时也可以用@Target等元注解来对自定义的注解类型做说明。</p>
<ul>
<li>@Target：用于描述注解的使用范围</li>
<li>@Retention：用于表示需要在什么级别保存注解信息，用于描述注解的声明周期，（SOURCE&lt;CLASS&lt;RUNTIME）</li>
<li>@Document：说明该注解将被包含在javadoc中</li>
<li>@Inherited：说明子类可以继承父类中的该注解</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">Defaultannotion</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"1111111"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Defaultannotion</span><span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"sss"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+vue（1）</title>
    <url>/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>JavaEE：Springboot+MybatisPlus</p>
<p>Web前端：Vue+ELementUi</p>
<h2 id="Web基础"><a href="#Web基础" class="headerlink" title="Web基础"></a>Web基础</h2><p>主要的软件架构模式：BS（浏览器|服务器） 与 CS（客户端|服务器）</p>
<p>Web主要的架构模式：BS（维护方便，开发简单、成本低、更新快等）</p>
<p>程序的逻辑和数据都在服务端，浏览器求请求服务器，获取web页面，并把web页面展示给用户。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>JDK 1.8以上就可以（环境变量配置）</p>
<p>IDEA 什么版本都可以</p>
<p>Maven（项目管理工具）处理java项目的自动化构建（编译、运行、打包、文档）和依赖的管理。</p>
<h2 id="Springboot介绍"><a href="#Springboot介绍" class="headerlink" title="Springboot介绍"></a>Springboot介绍</h2><p>基于Spring的全新框架，简化spring的搭建和开发，比ssm的配置简单了很多，省略了很多xml文档。</p>
<p>约定优于配置，默认配置较多，只需要很少的配置。</p>
<p>内嵌了tomcat、jetty，不需要war包。</p>
<p>提供了定制化的启动器Starters，简化了maven（定制了maven的配置，帮助我们简化了配置），开箱就用。</p>
<p>纯java、没有xml和代码生成。</p>
<p>提供了监控方案，安全、服务健康等。</p>
<h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824210539414.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824210539414.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220824210539414"></p>
<p>在idea中选择的时候，注意jdk的版本等信息。</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824210802751.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824210802751.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220824210802751"></p>
<p>此处可选择springboot的版本信息，以及要导入的依赖。</p>
<p>此时等待一段时间即可。</p>
<p>目录结构：</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824211339566.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824211339566.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220824211339566"></p>
<p>java下存放java代码，resource下的static和template用来存放公共资源，一般的，我们把js、css、图片等信息存放到static下，将页面放到template下，访问时，static的优先级是要大于template的，并且template下的页面不用thymeleaf映射和controller是无法直接url访问的。</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824211737361.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824211737361.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220824211737361"></p>
<p>写一个Controller，注解声明一下，这个类就可以去接受请求，而后写一个方法，加一个注解getmapping，这表明浏览器发一个get请求，字符串内的内容是url。</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824212119510.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824212119510.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220824212119510"></p>
<p>此时，运行启动器，打开网页，访问hello，就可以看到我们定义的返回值。</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824212210339.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824212210339.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220824212210339"></p>
<p>一般的，默认的端口是8080，可自定义。</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824212243749.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824212243749.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220824212243749"></p>
<h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>在实际开发中，我们会经常的修改后台文件，导致重新编译、启动等，非常麻烦。</p>
<p>springboot提供了devtools组件，让我们不用手动重启应用也可以重新编译、启动。</p>
<p>devtools会监控classpath下的文件，触发restart类加载器重新加载这个类，从而实现类文件和属性文件的热部署。</p>
<p>注意的是，也不是什么都需要重启应用，可以通过设置属性来制定一些目录或文件的修改不用重启。</p>
<p>引入依赖</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220826222051160.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220826222051160.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826222051160"></p>
<p>其中optional的含义是，依赖不会传递，也就是其他项目如果引入这个项目的jar包，不会包含这个devtools。</p>
<p>引入依赖后，记得刷一下maven。</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824212809166.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824212809166.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220824212809166"></p>
<p>如果你找不到这个按钮。</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824213521794.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220824213521794.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220824213521794"></p>
<p>在引入了依赖之后，我们需要在idea中手动配置。</p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220826220434604.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220826220434604.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826220434604"></p>
<p><img src="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220826220943295.png" class="lazyload placeholder" data-srcset="/2022/08/24/springboot-vue%EF%BC%881%EF%BC%89/image-20220826220943295.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220826220943295"></p>
<p>重启idea后生效。</p>
<p>但是这其实并不是真正的热部署，但是好在他可以实现快速重启。</p>
<p>如果你觉得这不够快，你可以使用**<a href="https://link.zhihu.com/?target=https://jrebel.com/software/jrebel/">JRebel</a>**插件，只是说它要收费。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+vue（5）</title>
    <url>/2022/08/27/springboot-vue%EF%BC%885%EF%BC%89/</url>
    <content><![CDATA[<h2 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h2><p>ORM:对象关系映射，解决的是数据库和面向对象不匹配的问题，它的本质是简化操作数据库的编码。</p>
<p>MyBatis是一款优秀的数据持久层ORM框架，被广泛地应用于应用系统。</p>
<p>MyBatis能够非常灵活地实现动态SQL，可以使用XML或注解来配置和映射原生信息，能够轻松地将Java的POJO（Plain Ordinary Java Object，普通的Java对象）与数据库中的表和字段进行映射关联。</p>
<p>MyBatis-Plus是一个 MyBatis 的增强工具，在 MyBatis 的基础上做了增强，简化了开发。</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        mybatis plus--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--        mysql driver--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">"com.mysql.cj.jdbc.Driver"</span>
<span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">"jdbc:mysql://localhost:3306/milk?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8"</span>
<span class="token attr-name">spring.datasource.name</span><span class="token punctuation">=</span><span class="token attr-value">"root"</span>
<span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">"root"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置数据库信息之后，在启动类上添加MapperScan注解，参数为Mapper包。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"top.rczmm.springboot1.Mapper"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot1Application</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Springboot1Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Insert</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1<span class="token punctuation">.</span>poji<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into users values(#&#123;id&#125;,#&#123;name&#125;) "</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>CRUD，可以通过注释来写，也可以配置xml文件。</p>
<p>除此之外，MybatisPLus也提供了一些注解：</p>
<p>@TableName，当表名与实体类名称不一致时，可以使用@TableName注解进行关联。</p>
<p>n@TableField，当表中字段名称与实体类属性不一致时，使用@TableField进行关联</p>
<p>@TableId，用于标记表中的主键字段，MybatisPlus也提供了主键生成策略</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论笔记</title>
    <url>/2022/09/10/%E6%A6%82%E7%8E%87%E8%AE%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>罗素悖论</p>
<p>令 P(x) 表示 x ∉ x. 也就是说，对 x 而言，如果 P(x) 是真的， 那么 x 就不是自身的元素; 但如果 P(x) 为假，那么 x 就是 x 中的元素。</p>
<p>那么 R 是集合吗？如果是，它的元素是什么？</p>
<p>如果你在考虑 R ∉ R 是否正确， 那就开始走上正轨了。 </p>
<p>我们要用到表达式 x ∉ x， 这意味着要对 x 有所选择。</p>
<p>x = R 很自然地成为一个被考察的候选对象， 因为它涉及我们要研究的东西 (并且在分析 中研究是很不错的尝试)。</p>
<p> 这里有两种可能的情况：</p>
<p>要么 R 在 R 中， 要么 R 不在 R 中. </p>
<p>• 首先， 假设 R 在 R 中. 由于我们假设 R ∉ R， 并且 R 是由那些不属于自身 的对象构成的， 所以由 R 的定义可知， R ∈ R. 但这是很荒谬的. R ∉ R 和 R ∈ R 怎么可能同时成立呢？因此， 假设 R 在 R 中是错误的. </p>
<p>• 唯一可能的情况是 R 不在 R 中。现在来讨论这种情况。 正如我们已经说过 的， R 是由全体不属于自身的东西构成的集合。我们现在假设 R ∉ R， 但是 从定义上来看， 这正是 R 中元素所满足的条件！同样地， 我们得到了荒谬的 结论， 即 R ∈ R 和 R ∉ R 同时成立. 换句话说， 在任何一种情况下， 我们都得到了奇怪的情形：当 R ∉ R 时恰有 R ∈ R. 这意味着什么呢？这意味着， 我们可以用集合做什么的观念 —— 更具体地说， 我们如何从旧集合中构造新集合的观念 —— 具有致命的缺陷。 这一悖论的解决为现代集合论奠定了基础。 从罗素悖论中可以推出一个结论， 那就是我们无法通过简单地收集具有给定性质的所有对象来形成集合。 </p>
<p>幸运的是， 我们在概率论中遇到的绝大多数集合都没有这个问题， 但重要的是意识到潜在的危险， 并且要正确、 认真地理解证明。 </p>
<p>事件的概率必然涉及大型集对子集指定概率的问题。但是，没有一种通用的方法可以将概率分配给每个子集，并且使得概率函数满足某些条件。这涉及到巴拿赫-塔尔斯基悖论。</p>
<p>为了防止不能把概率一致地分给所有可能的子集，必须留意要考察的事件。</p>
<p>笛卡尔积：全体A、B的有序集对（a，b）</p>
<p>幂集：集合所有子集的集合</p>
]]></content>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记</title>
    <url>/2022/08/30/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>旅行商人问题</p>
<p>假设有一个运输公司，他有一个中央仓库，每一天，他都要在仓库装车，并且到n个地方送货，一天结束，送货车返回仓库，为了降低成本，该公司希望选择一条送货车行驶距离最短的送货顺序。</p>
<p> 这是一个NP问题，多项式复杂程度非确定性问题。</p>
<p>生成一个问题的解往往比验证一个给定的解时间花费的更多。</p>
<p>矩阵相乘</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+vue（6）</title>
    <url>/2022/08/28/springboot-vue%EF%BC%886%EF%BC%89/</url>
    <content><![CDATA[<h2 id="多表查询和分页查询"><a href="#多表查询和分页查询" class="headerlink" title="多表查询和分页查询"></a>多表查询和分页查询</h2><p>多表</p>
<p>实现复杂关系映射，可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置。</p>
<p><img src="/2022/08/28/springboot-vue%EF%BC%886%EF%BC%89/image-20220828145912038.png" class="lazyload placeholder" data-srcset="/2022/08/28/springboot-vue%EF%BC%886%EF%BC%89/image-20220828145912038.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220828145912038"></p>
<p>（MybatisPLus对多表无变化，以上为Mybatis的注解。）</p>
<p>测试</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from t_user"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>
        <span class="token punctuation">&#123;</span>
                <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"message"</span><span class="token punctuation">,</span>javaType <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">"top.rczmm.springboot1.Mapper.MessageMapper.selectById"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectAllUsersMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>分页</p>
<p>编写配置文件</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>rczmm<span class="token punctuation">.</span>springboot1<span class="token punctuation">.</span>configuration</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PaginationInnerInterceptor</span> paginationInnerInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span>paginationInnerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"findAll"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">IPage</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">userMapper<span class="token punctuation">.</span></span>SelectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Python的QT（二）</title>
    <url>/2022/08/24/%E5%9F%BA%E4%BA%8EPython%E7%9A%84QT%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h2><p>首先，Qt原来是用C++写的一个框架，作为一个框架，Qt包含了很多的组件，这些组件是按照模块和组件来分布的。</p>
<p>qtbase就是大多数模块的基础组件，比例qtcore、qtgui、qtwidgets、qtnetworks，这些模块里当然都有一些直接可以实例化的类。</p>
<p>因此在编程中，我们可以直接使用他们，用他们来创建应用程序、处理文件、网络连接、正则表达式、文本编码等。</p>
<p>值得一提的是qtwidgets模块，该模块用于图形化程序，这在qt中是核心的部分。</p>
<p>当然还有一些其他的模块，在qt中，有着qml的存在，使得我们可以使用javascript来处理一些命令式的部分，官网是这样描述的，所谓的命令式，即计算机how的过程。之所以用到js，在我看来是为了更好的兼容与扩展，这一点在qt可以使用c++扩展和连接代码就可以看出。</p>
<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>在qt中，除了py文件之外，还存在着用户界面定义文件ui文件，以及资源收集的qrc文件和qt建模语言文件qml。</p>
<p>当然还有项目文件pyproject。</p>
<h2 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h2><p>这其实直接放在helloworld后面会好一些。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys

<span class="token keyword">from</span> PySide6 <span class="token keyword">import</span> QtWidgets<span class="token punctuation">,</span> QtCore<span class="token punctuation">,</span>QtGui
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Slot


<span class="token keyword">class</span> <span class="token class-name">MyWidget</span><span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">'hello Tom'</span>

        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span><span class="token string">'点我'</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>text <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span><span class="token string">'helloworld'</span><span class="token punctuation">,</span> alignment<span class="token operator">=</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>say<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">magic</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hello<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Button clicked"</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    widget <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
    widget<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
    widget<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是helloworld的代码，我们忽略那些定义和创建的内容，我们会发现，程序本质上定义了一个按钮，并且在按钮按下的时候，调用了一个方法。</p>
<p>这看起来似乎很简单，但是在qt中，在按钮按下到执行对应内容的机制，被称为信号和槽，同时这也是qt的核心特性。</p>
<p>信号，在上述代码中，当我们单击按钮的时候，这就是一个信号，所谓的槽也就是信号传出时发生的情况，或者说信号的接收者。</p>
<p>信号和插槽不是按钮的专属，事实上所有继承了qobject的子类都可以包含信号和插槽，信号由对象发出。要注意的是，信号仅仅承担发出，并不关心接受的问题。这看起来似乎有点不负责任，但是封装的很好。</p>
<p>插槽用来接受信号，但实际上他们本质上只是最普通的函数，槽同样的只负责接受，他不知道有什么信号能连接到它。</p>
<p>这样的看起来紧密，却随时可以断开连接，互相连接就导致了qt可以创建真正的独立组件。</p>
<p>一个例子，我们可以创建很多的信号，这些信号都连接到一个插槽，或者多个插槽，甚至我们可以把一个信号连接到一个信号。</p>
<p>当然在qt中，有一些预定义的信号和插槽。</p>
<p>关于信号，在 Python 中编写类时，信号被声明为 class 的类级变量<code>QtCore.Signal()</code></p>
<p>关于槽，由装饰器指示 <code>@QtCore.Slot()</code>，<code>Slot()</code>也接受一个<code>name</code>和一个<code>result</code>关键字。<code>result</code>关键字定义将返回的类型，可以是 C 或 Python 类型。关键字的<code>name</code>行为方式与<code>Signal()</code>. 如果没有作为名称传递，则新插槽将与正在装饰的函数具有相同的名称。</p>
<p>在例子中，我们能发现，我们自定义了一个插槽，却没有定义信号，其实此处是利用了qt的预定义信号。</p>
<p>下面自定义信号，并且实现信号与槽的连接。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys


<span class="token keyword">from</span> PySide6 <span class="token keyword">import</span> QtWidgets<span class="token punctuation">,</span> QtCore<span class="token punctuation">,</span>QtGui
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Slot<span class="token punctuation">,</span>Signal


<span class="token keyword">class</span> <span class="token class-name">MyWidget</span><span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>

    signal1 <span class="token operator">=</span> Signal<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">'hello Tom'</span>

        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span><span class="token string">'点我'</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>text <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span><span class="token string">'helloworld'</span><span class="token punctuation">,</span> alignment<span class="token operator">=</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>magic<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>signal1<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>say<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">magic</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hello<span class="token punctuation">)</span>
        sign <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sign<span class="token punctuation">.</span>signal1<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token punctuation">)</span>


    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Button clicked"</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    widget <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
    widget<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
    widget<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>基于python的QT（一）</title>
    <url>/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>QT，一个跨平台的GUI编程框架，支持多种语言，java、c++、python。</p>
<p>此笔记基于python。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Qt，对于python而言，QT支持的版本最低是3.6，在官方文档中，建议使用虚拟环境，即venu，笔记中使用pycharm工具自动配置。</p>
<p>pycharm中，创建项目，软件自动配置虚拟环境。</p>
<p><img src="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819105050533.png" class="lazyload placeholder" data-srcset="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819105050533.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220819105050533"></p>
<p>当然也可以不使用pycharm。</p>
<p>以下为官网对创建和激活环境的描述：</p>
<pre class="line-numbers language-none"><code class="language-none">创建和激活环境 您可以通过在终端上运行以下命令来做到这一点：

python -m venv env，（您的 Python 可执行文件可能被调用&#96;python3&#96;）

用于 Linux 和 macOS 的源 env&#x2F;bin&#x2F;activate

适用于 Windows 的env\Scripts\activate.bat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>安装pyside6包，可使用pip，也可以在pycharm中搜索安装。</p>
<p><img src="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819104853500.png" class="lazyload placeholder" data-srcset="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819104853500.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220819104853500"></p>
<p>如上图，pycharm中直接安装即可。（安装可能会因为网速等问题过慢，可自行更换镜像）</p>
<p><img src="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819105817742.png" class="lazyload placeholder" data-srcset="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819105817742.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220819105817742"></p>
<p>此处添加即可。</p>
<p>pip命令如下：</p>
<hr>
<p><strong>pip install pyside6</strong>，用于最新版本。</p>
<p><strong>pip install pyside6==6.0</strong>，专门针对版本<code>6.0</code></p>
<p>也可以从官方的服务器安装特定快照：</p>
<pre class="line-numbers language-none"><code class="language-none">pip install --index-url&#x3D;https:&#x2F;&#x2F;download.qt.io&#x2F;snapshots&#x2F;ci&#x2F;pyside&#x2F;6.0.0&#x2F;latest pyside6 --trusted-host download.qt.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试</p>
<p><img src="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819105856465.png" class="lazyload placeholder" data-srcset="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819105856465.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220819105856465"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> PySide6<span class="token punctuation">.</span>QtCore

<span class="token keyword">print</span><span class="token punctuation">(</span>PySide6<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>引入核心包，打印版本信息即可。</p>
<p>6.3.1（笔记版本）</p>
<h2 id="Helloworld"><a href="#Helloworld" class="headerlink" title="Helloworld"></a>Helloworld</h2><p>pyside6模块提供了一些子模块用来访问Qt的API。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys

<span class="token keyword">from</span> PySide6 <span class="token keyword">import</span> QtWidgets<span class="token punctuation">,</span> QtCore<span class="token punctuation">,</span>QtGui


<span class="token keyword">class</span> <span class="token class-name">MyWidget</span><span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">'hello Tom'</span>

        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span><span class="token string">'点我'</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>text <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span><span class="token string">'helloworld'</span><span class="token punctuation">,</span> alignment<span class="token operator">=</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>magic<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@QtCore<span class="token punctuation">.</span>Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">magic</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hello<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    widget <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
    widget<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
    widget<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是官方文档中的例子，我只是取消了随机，让他变得更简单一点。</p>
<p>虽然他看起来十分的简单，但实际上这个例子包含了Qt的很多核心内容。</p>
<p>如果你尝试运行了这个代码，你会发现当你点击按钮的时候，屏幕上的文字会发生变化，这看起来似乎没什么了不起的，但实际上，这让我们的小部件和其他小部件进行了通信，它足以帮我们解决很多。</p>
<p>代码之中</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>magic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中clicked是<em>QPushButton</em>的一个预定义信号，在使用之中不会提示，甚至idea还有弹出警告，因为在<em>QPushButton</em>中找不到任何名为clicked的属性与方法。</p>
<p>但实际上，当我们观察<em>QPushButton</em>类，会发现他继承了父类QAbstractButton，而父类拥有此方法。</p>
<p><img src="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819112618328.png" class="lazyload placeholder" data-srcset="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819112618328.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220819112618328"></p>
<p>对于这个警告，直接选择忽略即可。</p>
<p>运行结果：</p>
<p><img src="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819112659956.png" class="lazyload placeholder" data-srcset="/2022/08/19/%E5%9F%BA%E4%BA%8Epython%E7%9A%84QT%EF%BC%88%E4%B8%80%EF%BC%89/image-20220819112659956.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220819112659956"></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学</title>
    <url>/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="高等数学学习笔记"><a href="#高等数学学习笔记" class="headerlink" title="高等数学学习笔记"></a>高等数学学习笔记</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>在高等数学里，微积分无疑是极为重要的，但是如果没有函数去研究微积分，这其实很没有意义，在微积分的世界里，函数在参与排行榜绝对排行第一。</p>
<h3 id="函数概念"><a href="#函数概念" class="headerlink" title="函数概念"></a>函数概念</h3><p>函数是什么？在很多教材或者课外读本上都有规范或者是特殊的定义，我更加喜欢普林斯顿微积分的描述，<strong>函数是将一个对象转化为另一个对象的规则。</strong></p>
<p>这听起来似乎和工厂、程序之类的概念类似，而且一点也不数学。</p>
<p>首先要说的是，函数是一个变换规则，例如f（x），说 “f (x) 是 一个函数”其实是不正确的, 应该说 “f 是一个函数“。</p>
<p>其次，每一个函数都有输入与输出，对于输入而言，应当是有效的，如同f（x） = x-2这样函数表达式，如果我们输入一个“人”，这显然没有任何意义。</p>
<p>然后，对于函数而言，如果只有输入而没有输出就会显得毫无意义，因此，<strong>一个函数必须给每一个有效的输入指定唯一的输出。</strong></p>
<h3 id="区间表示"><a href="#区间表示" class="headerlink" title="区间表示"></a>区间表示</h3><p>我们在说明输入的有效与输出的范围时，会使用定义域与值域，但实际上，在普林斯顿里，还有上域与下域的说法。在描述这样的范围时，区间的表示会让我们做的更好。</p>
<p>我们约定 [a, b] 是指从 a 到 b 端点间的所有实数, 包括 a 和 b。类似这样的称作闭区间。 如果你不想包括端点, 把方括号变为圆括号就行了，这样的成为开区间，当然如果你想包含一边又不要一边的端点，你就可以一边方括号一边圆括号，这样的就是半开区间。</p>
<h3 id="求定义域"><a href="#求定义域" class="headerlink" title="求定义域"></a>求定义域</h3><p>很多时候，函数的定义会包括定义域，但是有些时候，函数的定义域没有给出，通常，定义域包含实数集R以及尽可能多的部分。</p>
<p>但是在某些时候，例如负数的平方根，这就会出现问题，它的定义域一定是非负数。</p>
<p>还有一些常见的情况：</p>
<p>分数的分母不能为0。（tan 90不成立）</p>
<p>不能取一个负数的偶次方根。</p>
<p>不能取到一个负数或者是0的对数。</p>
<h3 id="求值域"><a href="#求值域" class="headerlink" title="求值域"></a>求值域</h3><p>如果可以，我们将一个函数画出图像后，我们会发现，无论是定义域还是值域似乎都变得容易起来，我们甚至还可以从图像上观察出最值，变化趋势等等很多的内容。</p>
<p>函数的值域，在我们画出图像后，我们不妨假设此此刻有左右的光束射入光束，而后在y轴上留上影子，这个影子的并集就是值域。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802150538282.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802150538282.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="普林斯顿微积分图1-1" style="zoom:33%;">

<p>感谢普林斯顿，在看到这一幅图的时候，想必你对某些教材上关于函数与映射的描述也能清晰几分。</p>
<p>检验函数成立</p>
<p>上面的例子里，我们用横线来模拟光照得到了值域，如果我们使用竖线呐？</p>
<p>这很帮助我们确定函数是否成立。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802150809227.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802150809227.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220802150809227" style="zoom:33%;">

<p>如图的画，我们发现对于某些竖线，圆与它有超过一个以上的交点，这就违反了函数中，一个输入得到唯一输出的原则。</p>
<h3 id="反函数"><a href="#反函数" class="headerlink" title="反函数"></a>反函数</h3><p>对于函数而言，你给一个输入就可以得到一个输出，前提是在定义域与值域之内。如果我们把过程倒过来，你选一个输出，那么说明样的输入能得到这个输出呐？</p>
<p>这其实就是一个逆转变换的过程，从输出出发，发现一个新的函数，这个函数就是原函数的反函数。f<sub>-1</sub>这就是他的写法。</p>
<p>对于这样的情形有一些总结：</p>
<p>反函数的定义域和原函数的值域相同.</p>
<p>原函数的定义域和反函数的值域相同。</p>
<p>反函数更加像是原函数的撤销按钮，从x出发你可以得到y，从y出发，你可以逆转这个过程，重新得到x。</p>
<p>但是并不是所有的原函数都可以得到反函数的。</p>
<p>我们知道函数成立的基本条件就是，一个输入得到一个唯一确定的输出。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802151604787.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802151604787.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220802151604787" style="zoom:50%;">

<p>如上的函数，我们通过他的图像不难发现，一个输出对应了两个输入。</p>
<p>如果对于他的定义域不加以限制，那么反函数就会出现一个输入对应两个输出的情况。</p>
<p>对于什么样的函数能得到反函数，可以使用水平线的方式检验。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802151750935.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802151750935.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220802151750935" style="zoom:33%;">

<p>如上，每一条水平线与函数至多只有一个交点，那么这样的函数就可以得到反函数。</p>
<p>求反函数</p>
<p>这看起来似乎很困难，但其实只要得到表达式，我们根据表达式，直接解出x就好了。</p>
<p>在图像上，反函数其实类似于镜面反射，在坐标轴中，这个镜面指的就是y=x这一第一、第三象限的分界线。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802152103114.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802152103114.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220802152103114" style="zoom:33%;">

<p>限制定义域</p>
<p>这是为了没有通过水平线检验的函数准备的，通过限制定义域的方式，相当于擦去了一部分图像，来得到反函数。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802152244347.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220802152244347.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220802152244347" style="zoom:33%;">

<p>但是要注意原函数限制了定义域，那么反函数的值域也就得到了限制。</p>
<p>反函数的反函数</p>
<p>既然反函数是对原函数的撤销，那么反函数的反函数其实就是原函数，但是要注意定义域。</p>
<p>复合函数</p>
<p>有一个表达式为 g(x) = x<sub>2 </sub>的函数g。 你可以将 x 替换成任何使函数有意义的对象，这样的复合函数可能包含两个或者更多的基本函数。</p>
<p>复合函数有一个很简单也很重要的例子，将函数f(x)=x<sub>2</sub>和函数g(x)=x-a(a是常数)进行复合。这时得到的函数在形状上看起来与函数f是一样的，只不过是原函数图像向右平移了a个单位。（假设，向左平移3个单位与向右平移-3个单位是一样的。）</p>
<p>奇函数和偶函数</p>
<p>有的函数在图像上具有对称的特性，这很方便对他们进行讨论。</p>
<p>偶函数的图像关于y轴对称，而奇函数关于原点有180<sub>o</sub>对称</p>
<h2 id="微积分概念"><a href="#微积分概念" class="headerlink" title="微积分概念"></a>微积分概念</h2><p>微积分到底是什么？</p>
<p>微分与积分的关系是什么？</p>
<p>回想高数的学习历程，最后发现好像对于微积分来说，除了课本上习题册上的题目，其他的我就完全不知道了，甚至于再过些时间，这些题目我也做不了了。</p>
<p>我的看法是，当我们学习或者是掌握了一门学科或者是一门技术之后，我们应当对它有提纲挈领的认知。</p>
<p><strong>微积分关心的是瞬时的情况。</strong></p>
<p>首先，让我们来看一个实际例子，我们用最常见的时间、速度、路程函数。</p>
<p>假设，一辆汽车，当然也可以是一个人或者你想要假设的任何东西，现在它以20km每小时的速度向前行驶，三个小时过后。让我们看看时间与速度、时间与路程的关系。</p>
<p>时间与速度：</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624144454251.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624144454251.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="时间与速度" style="zoom:33%;">

<p>时间与路程：</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624144804969.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624144804969.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="时间与路程" style="zoom:33%;">

<p>如上，我们得到了时间与速度的关系，时间与路程的关系。</p>
<p>如果我们再试着想象一下，速度如果不是匀速？</p>
<p>时间与速度：</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624145428032.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624145428032.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="时间与速度" style="zoom:33%;">

<p>时间与路程：</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624150325333.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624150325333.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220624150325333" style="zoom:33%;">

<p>虽然在图像上，好像两个路程函数看起来差不多，但是从y轴，也就是distance的值上，我们明显的感觉到，因为速度的变化，路程函数发生了变化。</p>
<p>同样的，如何我们改变路程函数，那么速度函数也会发生改变。</p>
<p>而微积分研究的本质上就是两个函数的关系。</p>
<p>其中从速度到路程，是积分的过程，而从路程到速度，是微分的过程。</p>
<p>或者说，我们再举一个例子。</p>
<p>当你出生的时候，你的年龄为0岁，这时候你大概有10公斤，当然我也不知道，瞎编了一个数字。而后当你10岁的时候，你已经37公斤了，当你18岁的时候，你已经49公斤了，而后等你30岁的时候，你已经59公斤了，此时你来到你人生体重最高点，再往后，50岁的时候，你就只有58公斤了，一直到62岁，你就只有52公斤了。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624151515813.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624151515813.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220624151515813" style="zoom:33%;">

<p>如图，简单的把以上提到的点描成这样的图。</p>
<p>那么？新的问题来了，能否根据它得出体重的增长率呐？</p>
<h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><p>关于导数，首先应该区分开一个概念。</p>
<p>那就是可导与可微，前者表示的是变化率的极限，而后者表示的是局部线性化。</p>
<p>斜率，如果你还记得他，那么再好不过。</p>
<p>在生活中，我们用斜率来表示倾斜角度，回到函数图像上，其实他也同样如此。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624155740453.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624155740453.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220624155740453" style="zoom:33%;">

<p>如图，这是函数x<sub>2</sub>的函数图像。</p>
<p>这样的曲线，我们是如何求斜率的呐？</p>
<p>如果这不是曲线，而是直线，例如y = 2x呢。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624155958257.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624155958257.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220624155958257" style="zoom:33%;">

<p>我们直接利用垂直距离差比上水平距离差，就可以解出斜率。</p>
 <img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624192633829.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624192633829.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220624192633829" style="zoom:33%;">

<p>这时候，∆y与∆x的比值，也就是θ角的正切就是斜率。</p>
<p>再次回到曲线的问题，只看x轴右半轴，假设这是一个表示路程的函数，那么在这里我们就可以得到任意的时间段内，这个车或者是其他的什么东西在这个时间段内的平均速度，这很简单，还未涉及微积分。<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624195456195.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624195456195.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220624195456195" style="zoom:33%;"></p>
<p>那么这段时间的速度，我们就应该用路程差比时间差，反应在图像中，就是垂直距离差比水平距离差。</p>
<p>微积分只关心瞬时情况，不如我就从x = 0这一点开始，当x=0的时候，这一点的斜率是怎么样的？</p>
<p>x = 0，y = 0.这是原点，可以发现此时虽然曲线依然在上升，但是有点像是刚刚起步，此时速度为0，因此这一点斜率为0，曲线水平。</p>
<p>实际上，求最低点也是微积分的主要应用之一，通过求斜率为0，可以求出最低点，这一点不上升也不下降，斜率为0。</p>
<p>这时，我们可以选一个离原点距离极小的点，标记为∆x，这个∆单纯的就是为了表示“小”的意思，他代表一个极小极小的变化。那么这时候从原点到∆x这一小段的平均速度是多少？平均斜率？</p>
<p>水平距离是∆x，曲线是简单的x<sub>2</sub>,垂直距离很明显。</p>
<p>平均斜率还是垂直比水平。即∆y / ∆x</p>
<p>虽然∆x已经非常非常小了，但是这里他依旧是平均值，我想让他减少到0，取极限，让这一段不断的减小，从而无限接近某个瞬间的情况，这样就能得到斜率，这样就能得到0点处的斜率。</p>
<p>这里的情形很简单，可以看到∆x<sub>2</sub> / ∆x的比值∆x会非常的小。因此平均斜率非常之小，沿着这种逐渐变小的思路，我将得到x = 0处的瞬时斜率。</p>
<p>让∆x逐渐减小，最后到0。</p>
<p>相当于行驶从静止开始，然后慢慢加速，这时候斜率很明显就不是0了。</p>
<p>来看一下任意点的斜率。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624193632932.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220624193632932.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" style="zoom:33%;">

<p>微积分的要义，取一小段距离∆x,移动到x+∆x处，这样的y就会移动到曲线上另外一点，这一点的值为y + ∆y或者是（x+∆x）<sub>2</sub>,因为此时的曲线还是y = x<sub>2</sub></p>
<p>此时的水平距离与垂直距离各自是∆x与∆y。</p>
<p>此时的∆y 比 ∆x应当为 (（x+∆x）<sub>2</sub> - x<sub>2</sub>)  /  ∆x</p>
<p>继续进行代数运算，我们得到了2x+∆x的结果，也就是说，此时的∆y比∆x的结果为2x + ∆x。</p>
<p>当然，到目前为止，这依然是小范围的平均值，还不是瞬时的情形。</p>
<p>当微积分开始介入，dy / dx。</p>
<p>如果说前面是小 / 小，那么这就是极小 / 极小。</p>
<p>这里的d，小的可以说已经无法分辨，小的已经无法把dy或者dx作为分开距离来考虑。</p>
<p>要注意，这里其实不是真正的除法了，因为在除法中，是不允许0 / 0的。而此处的0 / 0其实就是上面这种情况（∆y / ∆x）的极限。</p>
<p>这就是从代数走进微积分最关键的一步，这就得到了某一点上的瞬时情形。</p>
<p>再看上面的结论，取∆x趋近于0，那么结果就是2x。</p>
<p>因此最终的结论是，导数为2x。</p>
<p>因此这就是我们所说的函数二，也就是斜率函数，或者说是速度函数。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625174451687.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625174451687.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220625174451687" style="zoom:33%;">

<p>再来看，此时如果我们取（1,1）与（2,4）这两个点来讨论斜率。</p>
<p>那么自然而然的就会得到，斜率为3.</p>
<p>但实际上，这只是一条弦，这里跳了一大步。</p>
<p>我们在讨论∆x时，只是前进了一小步，更别说趋近于0时的dx了，这就成了无限小的一步。</p>
<p>因此实际的斜率，可以认为是过某一点的切线。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625175138540.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625175138540.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220625175138540" style="zoom:33%;">

<p>那么这一点的斜率，实际上就是把x =1 代入到我们的斜率函数也就是2x里。</p>
<p>因为我们可以通过斜率判断函数图像的走向，当斜率为负时，函数呈现下降趋势，当斜率很大的时候，函数图像往往更加陡峭，反之，当斜率为正时，函数图像成上升趋势，斜率很小的时候，函数图像更加平滑。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625204426879.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625204426879.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220625204426879" style="zoom:33%;">

<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625204433564.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625204433564.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220625204433564" style="zoom:33%;">

<p>这是sinx与cosx的函数图像，当然可能坐标轴有些陌生。</p>
<p>sinx的导数是cosx，那么比较这两个图像，增长，下降，快，慢，极大值，极小值。这些都体现了导数的重要性和实用性。</p>
<h2 id="二阶导数与极值"><a href="#二阶导数与极值" class="headerlink" title="二阶导数与极值"></a>二阶导数与极值</h2><p>二阶导数：也就是导数的导数。</p>
<p>在实际中，很少提到导数的导数，或者说更加高阶的导数，但是二阶导数对于处理极大、极小值时作用很大。</p>
<p>我们经常需要定位极值点，并且判断是极大值还是极小值。</p>
<p>定位极值点是一阶导数的职责，一阶导数为0的点就是极值点，如果函数存在极大值或者是极小值，要找到这个极值点的位置，就可以通过导数=0来寻找，此时函数图像趋于水平，根据它向下还是向上弯曲，得到极大值或者是极小值。</p>
<p>而判断极值点是极大值还是极小值就是二阶导数的职责了。</p>
<p>二阶导数表明，函数朝上还是朝下弯曲。</p>
<p>原函数，导函数，二阶导函数，现在的函数组就扩充为三个。</p>
<p>回到实际问题，依旧是路程，时间，速度的关系，二阶导函数其实表示的就是加速度。</p>
<p>我们知道路程求速度，只需要求导数就可以了，现在我们要求速度的导数，也就是二阶导数，加速度，也就是速度的变化率，加速或者减速的率。</p>
<p>先来看看x<sub>2</sub>的原函数，导函数与二阶导函数。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625210639471.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625210639471.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220625210639471" style="zoom:33%;">

<p>依旧是x<sub>2</sub>，表示函数高度，2x表示斜率，而2表示二阶导数，表示弯曲性，这表明斜率正在逐渐增加，函数图像向上弯曲。</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625211737687.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220625211737687.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220625211737687" style="zoom:33%;">

<p>在看看sinx的原函数、导函数与二阶导函数的图像。</p>
<p>事实上，图像上包含的信息可比说的信息多的多了，在0-π/2区间内，我们发现，sinx的二阶导数小于0的，也就是说此时的原函数向下弯曲，导函数应当呈现下降趋势。</p>
<p>引入“凹凸”的概念，事实上，我个人觉得，向上弯曲与向下弯曲的描述比凹凸更好。</p>
<p>sinx就是一个很经典的例子，在图像中，我们发现0-π/2区间内，即使图像向下弯曲，但是同样呈现在不断增长。</p>
<p>原函数 导函数 二阶导函数的关系也明了了。</p>
<p>二阶导函数大于零，表示导函数上升，毕竟对于导函数来说，二阶导数就是它的导数，原函数向上弯曲，反之。</p>
<p>x = π时，二阶导数变号了，而此时原函数开始向上弯曲。这个点就是拐点，二阶导数为0的点。</p>
<p>拐点意味着，二阶导数穿过0，即原函数的图像弯曲性发生改变。这一点在图像里很重要，当然没有极大值和极小值那么显眼。</p>
<p>y = x<sub>3</sub> - x<sub>2</sub> </p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220705145615431.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220705145615431.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220705145615431" style="zoom:33%;">

<p>首先求导：3x<sub>2</sub>-2x ,二阶导数：6x -2</p>
<p>极值点：令一阶导数为0，将所有的极值点一网打尽，之后通过二阶导数判断极大值与极小值。</p>
<p>那些点上，函数停止住了，既不上升，也不下降</p>
<p>在图像上，很容易找到，代数也很容易求出，一元二次方程的两个解。</p>
<p>不同的是，看图像很容易得到极大值与极小值，之所以不是最值，是因为图像明显的，会在x趋近于正无穷时，趋近于正无穷，因为该点只在其附近（领域内）是最大值，因此称作极大值或者局部最大值。极大值处会有什么性质？</p>
<img src="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220705150148722.png" class="lazyload placeholder" data-srcset="/2022/06/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220705150148722.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220705150148722" style="zoom:33%;">

<p>x = 0处，此时明显的，斜率应该为0，二阶导数为-2，此时二阶导数表示，图像向下弯曲，即凸。因此，此处是极大值而不是极小值。</p>
<p>另一个极值点，x = 2/3处，斜率为0，二阶导数为2，此时二阶导数表示图像向上弯曲，即凹，因此此处是极小值点。当然它也不是最小值，导数只能解释点周围很小很小范围内（领域内）的情况，这一点的导数无法连接，函数左会无限下降，函数右会无限上升。</p>
<p>知道函数后就能求出极大值点和极小值点，但最好还能找到拐点（弯曲方向变化的分界点）。</p>
<p>令二阶导数为0，或者通过图像，得出当x = 1/3的时候，这是一个拐点。</p>
<p>现在，就基本上找齐了函数上的所有特殊点，这些点其实都是有实际意义的。</p>
<p>假设你是一个经济学家，你正在分析某个地区的经济统计数据，你发现曲线的斜率一直为负，即经济一直在不断的下降，但是突然你发现近两年有经济复苏的现象，因为此时的图像向上弯曲，即二阶导数为正，数据虽然继续下降，但是速度开始变慢，在某一点上，到达最低点，触底反弹，一定是拐点后某一点。</p>
<p>极值点，可以说是导数最重要的应用之一，设导数为0，找到极大值和极小值点，微积分里大多数应用问题都要令导数等于0。</p>
<h2 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h2><p>y = e<sub>x</sub></p>
<p>这种函数用代数的方法无法建立，只有用微积分才能得到，因为要得到e<sub>x</sub>，要用到一些极限的步骤， 有些量趋于0，有些量趋于无穷。虽然有各种方法来得到e的x次方，但这些方法都会涉及极限的过程。</p>
<p>而对于极限</p>
<p>指数函数最重要的性质就是，他的导数就是他自身，这就是指数函数与众不同的地方。</p>
<p>对于指数函数，y = dy / dx</p>
<p>这其实就是一个简单的微分方程，同时包含函数和函数导数。</p>
<p>首先，任何数的0次方都等于1，因此指数函数从1开始。</p>
<p>y(x) = 1</p>
<p>此时 dy /dx = 1</p>
<p>反推，y(x) = 1 +x时，导数为1。</p>
<p>为了确保微分方程相等，dy / dx = 1+x</p>
<p>此时，y（x）= 1 + x + x<sub>2</sub>/2</p>
<p>以此类推，好像让微分方程成立，即两者相等是不可能的，除非两个方程无限，这里也确实无限。</p>
<p>直接写出n次之后的结果</p>
<p>y(x) = 1+x+x<sub>2</sub>/2 + x<sub>3</sub> / 3 * 2 + …. + x<sub>n</sub>/n(n-1)(n-2)…(1)+…</p>
<p>dy /dx = 1+x+x<sub>2</sub>/2 + x<sub>3</sub> / 3 * 2 + …. + x<sub>n-1</sub>/(n-1)！+x<sub>n</sub> / n!+ …</p>
<p>简单的说，n！的增长速度太快了，远远超过了x<sub>n</sub>，因此实际上，在末尾的项，这些量会变得极其的小。这个级数会趋于一个极限，不会因为加了很多项而无限变大。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
</search>
